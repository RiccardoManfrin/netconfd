/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.1.0
 * Contact: support@athonet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// A SystemApiController binds http requests to an api service and writes the service results to the http response
type SystemApiController struct {
	service SystemApiServicer
}

// NewSystemApiController creates a default api controller
func NewSystemApiController(s SystemApiServicer) Router {
	return &SystemApiController{ service: s }
}

// Routes returns all of the api route for the SystemApiController
func (c *SystemApiController) Routes() Routes {
	return Routes{ 
		{
			"ConfigGet",
			strings.ToUpper("Get"),
			"/api/1/mgmt/config",
			c.ConfigGet,
		},
		{
			"ConfigPatch",
			strings.ToUpper("Patch"),
			"/api/1/mgmt/config",
			c.ConfigPatch,
		},
		{
			"ConfigSet",
			strings.ToUpper("Put"),
			"/api/1/mgmt/config",
			c.ConfigSet,
		},
		{
			"PersistConfig",
			strings.ToUpper("Post"),
			"/api/1/mgmt/config/persist",
			c.PersistConfig,
		},
		{
			"ResetConfig",
			strings.ToUpper("Post"),
			"/api/1/mgmt/config/reload",
			c.ResetConfig,
		},
	}
}

// ConfigGet - Get current live configuration 
func (c *SystemApiController) ConfigGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ConfigGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigPatch - Patch existing configuration with new one 
func (c *SystemApiController) ConfigPatch(w http.ResponseWriter, r *http.Request) { 
	config := &Config{}
	if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigPatch(r.Context(), *config)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigSet - Replace existing configuration with new one 
func (c *SystemApiController) ConfigSet(w http.ResponseWriter, r *http.Request) { 
	config := &Config{}
	if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigSet(r.Context(), *config)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// PersistConfig - Persist live configuration
func (c *SystemApiController) PersistConfig(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.PersistConfig(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ResetConfig - Reload persisted configuration back
func (c *SystemApiController) ResetConfig(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ResetConfig(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
