/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.1.0
 * Contact: support@athonet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Ip - struct for Ip
type Ip struct {
	string *string
}

// stringAsIp is a convenience function that returns string wrapped in Ip
func stringAsIp(v *string) Ip {
	return Ip{ string: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Ip) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into string
	err = json.Unmarshal(data, &dst.string)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			match++
		}
	} else {
		dst.string = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.string = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(Ip)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(Ip)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Ip) MarshalJSON() ([]byte, error) {
	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Ip) GetActualInstance() (interface{}) {
	if obj.string != nil {
		return obj.string
	}

	// all schemas are nil
	return nil
}

type NullableIp struct {
	value *Ip
	isSet bool
}

func (v NullableIp) Get() *Ip {
	return v.value
}

func (v *NullableIp) Set(val *Ip) {
	v.value = val
	v.isSet = true
}

func (v NullableIp) IsSet() bool {
	return v.isSet
}

func (v *NullableIp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIp(val *Ip) *NullableIp {
	return &NullableIp{value: val, isSet: true}
}

func (v NullableIp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


