/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.1.0
 * Contact: support@athonet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"

	"gitlab.lan.athonet.com/riccardo.manfrin/netconfd/nc"
)

// SystemApiService is a service that implents the logic for the SystemApiServicer
// This service should implement the business logic for every endpoint for the SystemApi API.
// Include any external packages or services that will be required by this service.
type SystemApiService struct {
}

// NewSystemApiService creates a default api service
func NewSystemApiService() SystemApiServicer {
	return &SystemApiService{}
}

// ConfigGet - Configures and enforces a new live network configuration
func (s *SystemApiService) ConfigGet(ctx context.Context) (ImplResponse, error) {
	// TODO - update ConfigGet with the required logic for this service method.
	// Add api_system_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("ConfigGet method not implemented")
}

// ConfigPut - Configures and enforces a new live network configuration
func (s *SystemApiService) ConfigPut(ctx context.Context, config Config) (ImplResponse, error) {
	// TODO - update ConfigPut with the required logic for this service method.
	// Add api_system_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	for _, l := range config.Links {
		s.LinkPut(l)
	}
	return Response(http.StatusNotImplemented, nil), errors.New("ConfigPut method not implemented")
}

//LinkPut creates a new link
func (s *SystemApiService) LinkPut(Link Link) error {
	nc.LinkCreate(Link.Linkinfo.InfoKind, Link.Ifname, int(Link.Ifindex))
	return nil
}
