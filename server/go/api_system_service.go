/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.2.0
 * Contact: support@athonet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"

	"gitlab.lan.athonet.com/core/netconfd/nc"
)

// SystemApiService is a service that implents the logic for the SystemApiServicer
// This service should implement the business logic for every endpoint for the SystemApi API.
// Include any external packages or services that will be required by this service.
type SystemApiService struct {
	Conf Config
}

// NewSystemApiService creates a default api service
func NewSystemApiService() SystemApiServicer {
	return &SystemApiService{}
}

func readLiveConfig(s *SystemApiService) error {
	network, err := nc.Get()
	if err != nil {
		return err
	}
	hostNetwork := ncNetParse(network)
	s.Conf.Network = &hostNetwork
	return nil
}

// ConfigGet - Get current live configuration
func (s *SystemApiService) ConfigGet(ctx context.Context) (ImplResponse, error) {
	return GetErrorResponse(readLiveConfig(s), s.Conf)
}

// ConfigPatch - Patch existing configuration with new one
func (s *SystemApiService) ConfigPatch(ctx context.Context, config Config) (ImplResponse, error) {
	network := ncNetFormat(config)
	return PatchErrorResponse(nc.Patch(network), nil)
}

// ConfigSet - Replace existing configuration with new one
func (s *SystemApiService) ConfigSet(ctx context.Context, config Config) (ImplResponse, error) {
	network := ncNetFormat(config)
	//go delayedConfigSet(network)
	return PutErrorResponse(delayedConfigSet(network), nil)
}

func delayedConfigSet(network nc.Network) error {
	//time.Sleep(1 * time.Second)
	err := nc.Put(network)
	if err != nil {
		return err
	}
	return nil
}

// PersistConfig - Persist live configuration
func (s *SystemApiService) PersistConfig(ctx context.Context) (ImplResponse, error) {
	err := readLiveConfig(s)
	if err != nil {
		return PostErrorResponse(err, nil)
	}
	err = s.Conf.Persist()
	return PostErrorResponse(err, nil)
}

// ResetConfig - Reload persisted configuration back
func (s *SystemApiService) ResetConfig(ctx context.Context) (ImplResponse, error) {
	err := s.Conf.LoadConfig(s.Conf.Global.CfgPath)
	if err != nil {
		return PutErrorResponse(err, nil)
	}
	network := ncNetFormat(s.Conf)
	return PutErrorResponse(delayedConfigSet(network), nil)
}
