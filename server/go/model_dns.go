/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.1.0
 * Contact: support@athonet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Dns Name server for DNS resolution
type Dns struct {
	// The DNS server ip address to send DNS queries to
	Nameserver *string `json:"nameserver,omitempty"`
	// Evaluated priority (lower value indicates higher priority)
	Priority *int32 `json:"priority,omitempty"`
}

// NewDns instantiates a new Dns object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDns() *Dns {
	this := Dns{}
	return &this
}

// NewDnsWithDefaults instantiates a new Dns object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsWithDefaults() *Dns {
	this := Dns{}
	return &this
}

// GetNameserver returns the Nameserver field value if set, zero value otherwise.
func (o *Dns) GetNameserver() string {
	if o == nil || o.Nameserver == nil {
		var ret string
		return ret
	}
	return *o.Nameserver
}

// GetNameserverOk returns a tuple with the Nameserver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dns) GetNameserverOk() (*string, bool) {
	if o == nil || o.Nameserver == nil {
		return nil, false
	}
	return o.Nameserver, true
}

// HasNameserver returns a boolean if a field has been set.
func (o *Dns) HasNameserver() bool {
	if o != nil && o.Nameserver != nil {
		return true
	}

	return false
}

// SetNameserver gets a reference to the given string and assigns it to the Nameserver field.
func (o *Dns) SetNameserver(v string) {
	o.Nameserver = &v
}

// GetPriority returns the Priority field value if set, -1 otherwise.
func (o *Dns) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dns) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Dns) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Dns) SetPriority(v int32) {
	o.Priority = &v
}

func (o Dns) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nameserver != nil {
		toSerialize["nameserver"] = o.Nameserver
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	return json.Marshal(toSerialize)
}

type NullableDns struct {
	value *Dns
	isSet bool
}

func (v NullableDns) Get() *Dns {
	return v.value
}

func (v *NullableDns) Set(val *Dns) {
	v.value = val
	v.isSet = true
}

func (v NullableDns) IsSet() bool {
	return v.isSet
}

func (v *NullableDns) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDns(val *Dns) *NullableDns {
	return &NullableDns{value: val, isSet: true}
}

func (v NullableDns) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDns) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


