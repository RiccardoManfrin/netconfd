/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.2.0
 * Contact: support@athonet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Link Definition of an ip link interface (emulating iproute2 API)  References:  * [Linux Networking](https://www.kernel.org/doc/Documentation/networking/) * [Linux Bonding](https://www.kernel.org/doc/Documentation/networking/bonding.txt) * [Links Operstate](https://www.kernel.org/doc/Documentation/networking/operstates.txt)
type Link struct {
	// Inteface index ID
	Ifindex *int32 `json:"ifindex,omitempty"`
	// Interface name
	Ifname string `json:"ifname"`
	// Specify what is the VLAN physical device the virtual device is linked to. Applies to vlan type virtual devices
	Link *string `json:"link,omitempty"`
	// Composition of flags of the interface
	Flags *[]LinkFlag `json:"flags,omitempty"`
	// Maximum Transfer Unit value
	Mtu *int32 `json:"mtu,omitempty"`
	// Promiscuous mode flag
	Promiscuity *int32 `json:"promiscuity,omitempty"`
	// In case the interface is part of a bond or bridge, specifies the bond/bridge interface it belongs to.
	Master   *string       `json:"master,omitempty"`
	Linkinfo *LinkLinkinfo `json:"linkinfo,omitempty"`
	// Readonly state of the interface.  Provides information on the state being for example UP of an interface.  It is ignored when applying the config  Possible values:    * `up` - Interface is up   * `down` - Interface is down   * `unknown` - Interface state is not known (driver does not implement the API) 
	Operstate *string `json:"operstate,omitempty"`
	Linkmode *string `json:"linkmode,omitempty"`
	Group *string `json:"group,omitempty"`
	LinkType string `json:"link_type"`
	// Address on which the link IP layer is based.  This is usually a MAC address, but for some tunnelling protocols virtual link interface types (e.g. GRE tunnels) it can also be an IP address of the tunnel.  
	Address *string `json:"address,omitempty"`
	// IP addresses assigned to the link interface
	AddrInfo *[]LinkAddrInfo `json:"addr_info,omitempty"`
}

// NewLink instantiates a new Link object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLink(ifname string, linkType string) *Link {
	this := Link{}
	this.Ifname = ifname
	this.LinkType = linkType
	return &this
}

// NewLinkWithDefaults instantiates a new Link object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkWithDefaults() *Link {
	this := Link{}
	return &this
}

// GetIfindex returns the Ifindex field value if set, -1 otherwise.
func (o *Link) GetIfindex() int32 {
	if o == nil || o.Ifindex == nil {
		var ret int32 = -1
		return ret
	}
	return *o.Ifindex
}

// GetIfindexOk returns a tuple with the Ifindex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetIfindexOk() (*int32, bool) {
	if o == nil || o.Ifindex == nil {
		return nil, false
	}
	return o.Ifindex, true
}

// HasIfindex returns a boolean if a field has been set.
func (o *Link) HasIfindex() bool {
	if o != nil && o.Ifindex != nil {
		return true
	}

	return false
}

// SetIfindex gets a reference to the given int32 and assigns it to the Ifindex field.
func (o *Link) SetIfindex(v int32) {
	o.Ifindex = &v
}

// GetIfname returns the Ifname field value
func (o *Link) GetIfname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ifname
}

// GetIfnameOk returns a tuple with the Ifname field value
// and a boolean to check if the value has been set.
func (o *Link) GetIfnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ifname, true
}

// SetIfname sets field value
func (o *Link) SetIfname(v string) {
	o.Ifname = v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *Link) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Link) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *Link) SetLink(v string) {
	o.Link = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *Link) GetFlags() []LinkFlag {
	if o == nil || o.Flags == nil {
		var ret []LinkFlag
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetFlagsOk() (*[]LinkFlag, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *Link) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []LinkFlag and assigns it to the Flags field.
func (o *Link) SetFlags(v []LinkFlag) {
	o.Flags = &v
}

// GetMtu returns the Mtu field value if set, -1 otherwise.
func (o *Link) GetMtu() int32 {
	if o == nil || o.Mtu == nil {
		var ret int32 = -1
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetMtuOk() (*int32, bool) {
	if o == nil || o.Mtu == nil {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *Link) HasMtu() bool {
	if o != nil && o.Mtu != nil {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *Link) SetMtu(v int32) {
	o.Mtu = &v
}

// GetPromiscuity returns the Promiscuity field value if set, -1 otherwise.
func (o *Link) GetPromiscuity() int32 {
	if o == nil || o.Promiscuity == nil {
		var ret int32 = -1
		return ret
	}
	return *o.Promiscuity
}

// GetPromiscuityOk returns a tuple with the Promiscuity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetPromiscuityOk() (*int32, bool) {
	if o == nil || o.Promiscuity == nil {
		return nil, false
	}
	return o.Promiscuity, true
}

// HasPromiscuity returns a boolean if a field has been set.
func (o *Link) HasPromiscuity() bool {
	if o != nil && o.Promiscuity != nil {
		return true
	}

	return false
}

// SetPromiscuity gets a reference to the given int32 and assigns it to the Promiscuity field.
func (o *Link) SetPromiscuity(v int32) {
	o.Promiscuity = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *Link) GetMaster() string {
	if o == nil || o.Master == nil {
		var ret string
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetMasterOk() (*string, bool) {
	if o == nil || o.Master == nil {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *Link) HasMaster() bool {
	if o != nil && o.Master != nil {
		return true
	}

	return false
}

// SetMaster gets a reference to the given string and assigns it to the Master field.
func (o *Link) SetMaster(v string) {
	o.Master = &v
}

// GetLinkinfo returns the Linkinfo field value if set, zero value otherwise.
func (o *Link) GetLinkinfo() LinkLinkinfo {
	if o == nil || o.Linkinfo == nil {
		var ret LinkLinkinfo
		return ret
	}
	return *o.Linkinfo
}

// GetLinkinfoOk returns a tuple with the Linkinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLinkinfoOk() (*LinkLinkinfo, bool) {
	if o == nil || o.Linkinfo == nil {
		return nil, false
	}
	return o.Linkinfo, true
}

// HasLinkinfo returns a boolean if a field has been set.
func (o *Link) HasLinkinfo() bool {
	if o != nil && o.Linkinfo != nil {
		return true
	}

	return false
}

// SetLinkinfo gets a reference to the given LinkLinkinfo and assigns it to the Linkinfo field.
func (o *Link) SetLinkinfo(v LinkLinkinfo) {
	o.Linkinfo = &v
}

// GetOperstate returns the Operstate field value if set, zero value otherwise.
func (o *Link) GetOperstate() string {
	if o == nil || o.Operstate == nil {
		var ret string
		return ret
	}
	return *o.Operstate
}

// GetOperstateOk returns a tuple with the Operstate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetOperstateOk() (*string, bool) {
	if o == nil || o.Operstate == nil {
		return nil, false
	}
	return o.Operstate, true
}

// HasOperstate returns a boolean if a field has been set.
func (o *Link) HasOperstate() bool {
	if o != nil && o.Operstate != nil {
		return true
	}

	return false
}

// SetOperstate gets a reference to the given string and assigns it to the Operstate field.
func (o *Link) SetOperstate(v string) {
	o.Operstate = &v
}

// GetLinkmode returns the Linkmode field value if set, zero value otherwise.
func (o *Link) GetLinkmode() string {
	if o == nil || o.Linkmode == nil {
		var ret string
		return ret
	}
	return *o.Linkmode
}

// GetLinkmodeOk returns a tuple with the Linkmode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLinkmodeOk() (*string, bool) {
	if o == nil || o.Linkmode == nil {
		return nil, false
	}
	return o.Linkmode, true
}

// HasLinkmode returns a boolean if a field has been set.
func (o *Link) HasLinkmode() bool {
	if o != nil && o.Linkmode != nil {
		return true
	}

	return false
}

// SetLinkmode gets a reference to the given string and assigns it to the Linkmode field.
func (o *Link) SetLinkmode(v string) {
	o.Linkmode = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *Link) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *Link) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *Link) SetGroup(v string) {
	o.Group = &v
}

// GetLinkType returns the LinkType field value
func (o *Link) GetLinkType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkType
}

// GetLinkTypeOk returns a tuple with the LinkType field value
// and a boolean to check if the value has been set.
func (o *Link) GetLinkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkType, true
}

// SetLinkType sets field value
func (o *Link) SetLinkType(v string) {
	o.LinkType = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Link) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Link) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *Link) SetAddress(v string) {
	o.Address = &v
}

// GetAddrInfo returns the AddrInfo field value if set, zero value otherwise.
func (o *Link) GetAddrInfo() []LinkAddrInfo {
	if o == nil || o.AddrInfo == nil {
		var ret []LinkAddrInfo
		return ret
	}
	return *o.AddrInfo
}

// GetAddrInfoOk returns a tuple with the AddrInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetAddrInfoOk() (*[]LinkAddrInfo, bool) {
	if o == nil || o.AddrInfo == nil {
		return nil, false
	}
	return o.AddrInfo, true
}

// HasAddrInfo returns a boolean if a field has been set.
func (o *Link) HasAddrInfo() bool {
	if o != nil && o.AddrInfo != nil {
		return true
	}

	return false
}

// SetAddrInfo gets a reference to the given []LinkAddrInfo and assigns it to the AddrInfo field.
func (o *Link) SetAddrInfo(v []LinkAddrInfo) {
	o.AddrInfo = &v
}

func (o Link) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ifindex != nil {
		toSerialize["ifindex"] = o.Ifindex
	}
	if true {
		toSerialize["ifname"] = o.Ifname
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if o.Mtu != nil {
		toSerialize["mtu"] = o.Mtu
	}
	if o.Promiscuity != nil {
		toSerialize["promiscuity"] = o.Promiscuity
	}
	if o.Master != nil {
		toSerialize["master"] = o.Master
	}
	if o.Linkinfo != nil {
		toSerialize["linkinfo"] = o.Linkinfo
	}
	if o.Operstate != nil {
		toSerialize["operstate"] = o.Operstate
	}
	if o.Linkmode != nil {
		toSerialize["linkmode"] = o.Linkmode
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["link_type"] = o.LinkType
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.AddrInfo != nil {
		toSerialize["addr_info"] = o.AddrInfo
	}
	return json.Marshal(toSerialize)
}

type NullableLink struct {
	value *Link
	isSet bool
}

func (v NullableLink) Get() *Link {
	return v.value
}

func (v *NullableLink) Set(val *Link) {
	v.value = val
	v.isSet = true
}

func (v NullableLink) IsSet() bool {
	return v.isSet
}

func (v *NullableLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLink(val *Link) *NullableLink {
	return &NullableLink{value: val, isSet: true}
}

func (v NullableLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
