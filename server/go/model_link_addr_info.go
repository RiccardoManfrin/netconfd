/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.1.0
 * Contact: support@athonet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LinkAddrInfo struct for LinkAddrInfo
type LinkAddrInfo struct {
	Local *Ip `json:"local,omitempty"`
	Prefixlen *int32 `json:"prefixlen,omitempty"`
	Broadcast *string `json:"broadcast,omitempty"`
}

// NewLinkAddrInfo instantiates a new LinkAddrInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkAddrInfo() *LinkAddrInfo {
	this := LinkAddrInfo{}
	return &this
}

// NewLinkAddrInfoWithDefaults instantiates a new LinkAddrInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkAddrInfoWithDefaults() *LinkAddrInfo {
	this := LinkAddrInfo{}
	return &this
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *LinkAddrInfo) GetLocal() Ip {
	if o == nil || o.Local == nil {
		var ret Ip
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkAddrInfo) GetLocalOk() (*Ip, bool) {
	if o == nil || o.Local == nil {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *LinkAddrInfo) HasLocal() bool {
	if o != nil && o.Local != nil {
		return true
	}

	return false
}

// SetLocal gets a reference to the given Ip and assigns it to the Local field.
func (o *LinkAddrInfo) SetLocal(v Ip) {
	o.Local = &v
}

// GetPrefixlen returns the Prefixlen field value if set, -1 otherwise.
func (o *LinkAddrInfo) GetPrefixlen() int32 {
	if o == nil || o.Prefixlen == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Prefixlen
}

// GetPrefixlenOk returns a tuple with the Prefixlen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkAddrInfo) GetPrefixlenOk() (*int32, bool) {
	if o == nil || o.Prefixlen == nil {
		return nil, false
	}
	return o.Prefixlen, true
}

// HasPrefixlen returns a boolean if a field has been set.
func (o *LinkAddrInfo) HasPrefixlen() bool {
	if o != nil && o.Prefixlen != nil {
		return true
	}

	return false
}

// SetPrefixlen gets a reference to the given int32 and assigns it to the Prefixlen field.
func (o *LinkAddrInfo) SetPrefixlen(v int32) {
	o.Prefixlen = &v
}

// GetBroadcast returns the Broadcast field value if set, zero value otherwise.
func (o *LinkAddrInfo) GetBroadcast() string {
	if o == nil || o.Broadcast == nil {
		var ret string
		return ret
	}
	return *o.Broadcast
}

// GetBroadcastOk returns a tuple with the Broadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkAddrInfo) GetBroadcastOk() (*string, bool) {
	if o == nil || o.Broadcast == nil {
		return nil, false
	}
	return o.Broadcast, true
}

// HasBroadcast returns a boolean if a field has been set.
func (o *LinkAddrInfo) HasBroadcast() bool {
	if o != nil && o.Broadcast != nil {
		return true
	}

	return false
}

// SetBroadcast gets a reference to the given string and assigns it to the Broadcast field.
func (o *LinkAddrInfo) SetBroadcast(v string) {
	o.Broadcast = &v
}

func (o LinkAddrInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Local != nil {
		toSerialize["local"] = o.Local
	}
	if o.Prefixlen != nil {
		toSerialize["prefixlen"] = o.Prefixlen
	}
	if o.Broadcast != nil {
		toSerialize["broadcast"] = o.Broadcast
	}
	return json.Marshal(toSerialize)
}

type NullableLinkAddrInfo struct {
	value *LinkAddrInfo
	isSet bool
}

func (v NullableLinkAddrInfo) Get() *LinkAddrInfo {
	return v.value
}

func (v *NullableLinkAddrInfo) Set(val *LinkAddrInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkAddrInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkAddrInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkAddrInfo(val *LinkAddrInfo) *NullableLinkAddrInfo {
	return &NullableLinkAddrInfo{value: val, isSet: true}
}

func (v NullableLinkAddrInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkAddrInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


