/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.3.0
 * Contact: support@athonet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Rule IP Rule
type Rule struct {
	Priority          *int    `json:"priority,omitempty"`
	Family            *int    `json:"family,omitempty"`
	Not               *bool   `json:"not,omitempty"`
	Src               *string `json:"src,omitempty"`
	Srclen            *int    `json:"srclen,omitempty"`
	Dst               *string `json:"dst,omitempty"`
	Dstlen            *int    `json:"dstlen,omitempty"`
	Tos               *int    `json:"tos,omitempty"`
	Iif               *string `json:"iif,omitempty"`
	Oif               *string `json:"oif,omitempty"`
	Ipproto           *string `json:"ipproto,omitempty"`
	Sport             *int    `json:"sport,omitempty"`
	Dport             *int    `json:"dport,omitempty"`
	SportStart        *int    `json:"sport_start,omitempty"`
	DportStart        *int    `json:"dport_start,omitempty"`
	SportEnd          *int    `json:"sport_end,omitempty"`
	DportEnd          *int    `json:"dport_end,omitempty"`
	Table             *int    `json:"table,omitempty"`
	SuppressPrefixlen *int    `json:"suppress_prefixlen,omitempty"`
	SuppressIfgroup   *int    `json:"suppress_ifgroup,omitempty"`
	Masquerade        *string `json:"masquerade,omitempty"`
	Protocol          *string `json:"protocol,omitempty"`
	Mark              *int    `json:"mark,omitempty"`
	Mask              *int    `json:"mask,omitempty"`
	Tunid             *uint   `json:"tunid,omitempty"`
	Goto              *int    `json:"goto,omitempty"`
	Flow              *int    `json:"flow,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	var not bool = false
	this.Not = &not
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	var not bool = false
	this.Not = &not
	return &this
}

// GetPriority returns the Priority field value if set, -1 otherwise.
func (o *Rule) GetPriority() int {
	if o == nil || o.Priority == nil {
		var ret int = -1
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetPriorityOk() (*int, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Rule) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int and assigns it to the Priority field.
func (o *Rule) SetPriority(v int) {
	o.Priority = &v
}

// GetFamily returns the Family field value if set, -1 otherwise.
func (o *Rule) GetFamily() int {
	if o == nil || o.Family == nil {
		var ret int = -1
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetFamilyOk() (*int, bool) {
	if o == nil || o.Family == nil {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *Rule) HasFamily() bool {
	if o != nil && o.Family != nil {
		return true
	}

	return false
}

// SetFamily gets a reference to the given int and assigns it to the Family field.
func (o *Rule) SetFamily(v int) {
	o.Family = &v
}

// GetNot returns the Not field value if set, zero value otherwise.
func (o *Rule) GetNot() bool {
	if o == nil || o.Not == nil {
		var ret bool
		return ret
	}
	return *o.Not
}

// GetNotOk returns a tuple with the Not field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetNotOk() (*bool, bool) {
	if o == nil || o.Not == nil {
		return nil, false
	}
	return o.Not, true
}

// HasNot returns a boolean if a field has been set.
func (o *Rule) HasNot() bool {
	if o != nil && o.Not != nil {
		return true
	}

	return false
}

// SetNot gets a reference to the given bool and assigns it to the Not field.
func (o *Rule) SetNot(v bool) {
	o.Not = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *Rule) GetSrc() string {
	if o == nil || o.Src == nil {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSrcOk() (*string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *Rule) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *Rule) SetSrc(v string) {
	o.Src = &v
}

// GetSrclen returns the Srclen field value if set, -1 otherwise.
func (o *Rule) GetSrclen() int {
	if o == nil || o.Srclen == nil {
		var ret int = -1
		return ret
	}
	return *o.Srclen
}

// GetSrclenOk returns a tuple with the Srclen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSrclenOk() (*int, bool) {
	if o == nil || o.Srclen == nil {
		return nil, false
	}
	return o.Srclen, true
}

// HasSrclen returns a boolean if a field has been set.
func (o *Rule) HasSrclen() bool {
	if o != nil && o.Srclen != nil {
		return true
	}

	return false
}

// SetSrclen gets a reference to the given int and assigns it to the Srclen field.
func (o *Rule) SetSrclen(v int) {
	o.Srclen = &v
}

// GetDst returns the Dst field value if set, zero value otherwise.
func (o *Rule) GetDst() string {
	if o == nil || o.Dst == nil {
		var ret string
		return ret
	}
	return *o.Dst
}

// GetDstOk returns a tuple with the Dst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDstOk() (*string, bool) {
	if o == nil || o.Dst == nil {
		return nil, false
	}
	return o.Dst, true
}

// HasDst returns a boolean if a field has been set.
func (o *Rule) HasDst() bool {
	if o != nil && o.Dst != nil {
		return true
	}

	return false
}

// SetDst gets a reference to the given string and assigns it to the Dst field.
func (o *Rule) SetDst(v string) {
	o.Dst = &v
}

// GetDstlen returns the Dstlen field value if set, -1 otherwise.
func (o *Rule) GetDstlen() int {
	if o == nil || o.Dstlen == nil {
		var ret int = -1
		return ret
	}
	return *o.Dstlen
}

// GetDstlenOk returns a tuple with the Dstlen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDstlenOk() (*int, bool) {
	if o == nil || o.Dstlen == nil {
		return nil, false
	}
	return o.Dstlen, true
}

// HasDstlen returns a boolean if a field has been set.
func (o *Rule) HasDstlen() bool {
	if o != nil && o.Dstlen != nil {
		return true
	}

	return false
}

// SetDstlen gets a reference to the given int and assigns it to the Dstlen field.
func (o *Rule) SetDstlen(v int) {
	o.Dstlen = &v
}

// GetTos returns the Tos field value if set, -1 otherwise.
func (o *Rule) GetTos() int {
	if o == nil || o.Tos == nil {
		var ret int = -1
		return ret
	}
	return *o.Tos
}

// GetTosOk returns a tuple with the Tos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTosOk() (*int, bool) {
	if o == nil || o.Tos == nil {
		return nil, false
	}
	return o.Tos, true
}

// HasTos returns a boolean if a field has been set.
func (o *Rule) HasTos() bool {
	if o != nil && o.Tos != nil {
		return true
	}

	return false
}

// SetTos gets a reference to the given int and assigns it to the Tos field.
func (o *Rule) SetTos(v int) {
	o.Tos = &v
}

// GetIif returns the Iif field value if set, zero value otherwise.
func (o *Rule) GetIif() string {
	if o == nil || o.Iif == nil {
		var ret string
		return ret
	}
	return *o.Iif
}

// GetIifOk returns a tuple with the Iif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIifOk() (*string, bool) {
	if o == nil || o.Iif == nil {
		return nil, false
	}
	return o.Iif, true
}

// HasIif returns a boolean if a field has been set.
func (o *Rule) HasIif() bool {
	if o != nil && o.Iif != nil {
		return true
	}

	return false
}

// SetIif gets a reference to the given string and assigns it to the Iif field.
func (o *Rule) SetIif(v string) {
	o.Iif = &v
}

// GetOif returns the Oif field value if set, zero value otherwise.
func (o *Rule) GetOif() string {
	if o == nil || o.Oif == nil {
		var ret string
		return ret
	}
	return *o.Oif
}

// GetOifOk returns a tuple with the Oif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetOifOk() (*string, bool) {
	if o == nil || o.Oif == nil {
		return nil, false
	}
	return o.Oif, true
}

// HasOif returns a boolean if a field has been set.
func (o *Rule) HasOif() bool {
	if o != nil && o.Oif != nil {
		return true
	}

	return false
}

// SetOif gets a reference to the given string and assigns it to the Oif field.
func (o *Rule) SetOif(v string) {
	o.Oif = &v
}

// GetIpproto returns the Ipproto field value if set, zero value otherwise.
func (o *Rule) GetIpproto() string {
	if o == nil || o.Ipproto == nil {
		var ret string
		return ret
	}
	return *o.Ipproto
}

// GetIpprotoOk returns a tuple with the Ipproto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIpprotoOk() (*string, bool) {
	if o == nil || o.Ipproto == nil {
		return nil, false
	}
	return o.Ipproto, true
}

// HasIpproto returns a boolean if a field has been set.
func (o *Rule) HasIpproto() bool {
	if o != nil && o.Ipproto != nil {
		return true
	}

	return false
}

// SetIpproto gets a reference to the given string and assigns it to the Ipproto field.
func (o *Rule) SetIpproto(v string) {
	o.Ipproto = &v
}

// GetSport returns the Sport field value if set, -1 otherwise.
func (o *Rule) GetSport() int {
	if o == nil || o.Sport == nil {
		var ret int = -1
		return ret
	}
	return *o.Sport
}

// GetSportOk returns a tuple with the Sport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSportOk() (*int, bool) {
	if o == nil || o.Sport == nil {
		return nil, false
	}
	return o.Sport, true
}

// HasSport returns a boolean if a field has been set.
func (o *Rule) HasSport() bool {
	if o != nil && o.Sport != nil {
		return true
	}

	return false
}

// SetSport gets a reference to the given int and assigns it to the Sport field.
func (o *Rule) SetSport(v int) {
	o.Sport = &v
}

// GetDport returns the Dport field value if set, -1 otherwise.
func (o *Rule) GetDport() int {
	if o == nil || o.Dport == nil {
		var ret int = -1
		return ret
	}
	return *o.Dport
}

// GetDportOk returns a tuple with the Dport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDportOk() (*int, bool) {
	if o == nil || o.Dport == nil {
		return nil, false
	}
	return o.Dport, true
}

// HasDport returns a boolean if a field has been set.
func (o *Rule) HasDport() bool {
	if o != nil && o.Dport != nil {
		return true
	}

	return false
}

// SetDport gets a reference to the given int and assigns it to the Dport field.
func (o *Rule) SetDport(v int) {
	o.Dport = &v
}

// GetSportStart returns the SportStart field value if set, -1 otherwise.
func (o *Rule) GetSportStart() int {
	if o == nil || o.SportStart == nil {
		var ret int = -1
		return ret
	}
	return *o.SportStart
}

// GetSportStartOk returns a tuple with the SportStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSportStartOk() (*int, bool) {
	if o == nil || o.SportStart == nil {
		return nil, false
	}
	return o.SportStart, true
}

// HasSportStart returns a boolean if a field has been set.
func (o *Rule) HasSportStart() bool {
	if o != nil && o.SportStart != nil {
		return true
	}

	return false
}

// SetSportStart gets a reference to the given int and assigns it to the SportStart field.
func (o *Rule) SetSportStart(v int) {
	o.SportStart = &v
}

// GetDportStart returns the DportStart field value if set, -1 otherwise.
func (o *Rule) GetDportStart() int {
	if o == nil || o.DportStart == nil {
		var ret int = -1
		return ret
	}
	return *o.DportStart
}

// GetDportStartOk returns a tuple with the DportStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDportStartOk() (*int, bool) {
	if o == nil || o.DportStart == nil {
		return nil, false
	}
	return o.DportStart, true
}

// HasDportStart returns a boolean if a field has been set.
func (o *Rule) HasDportStart() bool {
	if o != nil && o.DportStart != nil {
		return true
	}

	return false
}

// SetDportStart gets a reference to the given int and assigns it to the DportStart field.
func (o *Rule) SetDportStart(v int) {
	o.DportStart = &v
}

// GetSportEnd returns the SportEnd field value if set, -1 otherwise.
func (o *Rule) GetSportEnd() int {
	if o == nil || o.SportEnd == nil {
		var ret int = -1
		return ret
	}
	return *o.SportEnd
}

// GetSportEndOk returns a tuple with the SportEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSportEndOk() (*int, bool) {
	if o == nil || o.SportEnd == nil {
		return nil, false
	}
	return o.SportEnd, true
}

// HasSportEnd returns a boolean if a field has been set.
func (o *Rule) HasSportEnd() bool {
	if o != nil && o.SportEnd != nil {
		return true
	}

	return false
}

// SetSportEnd gets a reference to the given int and assigns it to the SportEnd field.
func (o *Rule) SetSportEnd(v int) {
	o.SportEnd = &v
}

// GetDportEnd returns the DportEnd field value if set, -1 otherwise.
func (o *Rule) GetDportEnd() int {
	if o == nil || o.DportEnd == nil {
		var ret int = -1
		return ret
	}
	return *o.DportEnd
}

// GetDportEndOk returns a tuple with the DportEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDportEndOk() (*int, bool) {
	if o == nil || o.DportEnd == nil {
		return nil, false
	}
	return o.DportEnd, true
}

// HasDportEnd returns a boolean if a field has been set.
func (o *Rule) HasDportEnd() bool {
	if o != nil && o.DportEnd != nil {
		return true
	}

	return false
}

// SetDportEnd gets a reference to the given int and assigns it to the DportEnd field.
func (o *Rule) SetDportEnd(v int) {
	o.DportEnd = &v
}

// GetTable returns the Table field value if set, -1 otherwise.
func (o *Rule) GetTable() int {
	if o == nil || o.Table == nil {
		var ret int = -1
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTableOk() (*int, bool) {
	if o == nil || o.Table == nil {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *Rule) HasTable() bool {
	if o != nil && o.Table != nil {
		return true
	}

	return false
}

// SetTable gets a reference to the given int and assigns it to the Table field.
func (o *Rule) SetTable(v int) {
	o.Table = &v
}

// GetSuppressPrefixlen returns the SuppressPrefixlen field value if set, -1 otherwise.
func (o *Rule) GetSuppressPrefixlen() int {
	if o == nil || o.SuppressPrefixlen == nil {
		var ret int = -1
		return ret
	}
	return *o.SuppressPrefixlen
}

// GetSuppressPrefixlenOk returns a tuple with the SuppressPrefixlen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSuppressPrefixlenOk() (*int, bool) {
	if o == nil || o.SuppressPrefixlen == nil {
		return nil, false
	}
	return o.SuppressPrefixlen, true
}

// HasSuppressPrefixlen returns a boolean if a field has been set.
func (o *Rule) HasSuppressPrefixlen() bool {
	if o != nil && o.SuppressPrefixlen != nil {
		return true
	}

	return false
}

// SetSuppressPrefixlen gets a reference to the given int and assigns it to the SuppressPrefixlen field.
func (o *Rule) SetSuppressPrefixlen(v int) {
	o.SuppressPrefixlen = &v
}

// GetSuppressIfgroup returns the SuppressIfgroup field value if set, -1 otherwise.
func (o *Rule) GetSuppressIfgroup() int {
	if o == nil || o.SuppressIfgroup == nil {
		var ret int = -1
		return ret
	}
	return *o.SuppressIfgroup
}

// GetSuppressIfgroupOk returns a tuple with the SuppressIfgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSuppressIfgroupOk() (*int, bool) {
	if o == nil || o.SuppressIfgroup == nil {
		return nil, false
	}
	return o.SuppressIfgroup, true
}

// HasSuppressIfgroup returns a boolean if a field has been set.
func (o *Rule) HasSuppressIfgroup() bool {
	if o != nil && o.SuppressIfgroup != nil {
		return true
	}

	return false
}

// SetSuppressIfgroup gets a reference to the given int and assigns it to the SuppressIfgroup field.
func (o *Rule) SetSuppressIfgroup(v int) {
	o.SuppressIfgroup = &v
}

// GetMasquerade returns the Masquerade field value if set, zero value otherwise.
func (o *Rule) GetMasquerade() string {
	if o == nil || o.Masquerade == nil {
		var ret string
		return ret
	}
	return *o.Masquerade
}

// GetMasqueradeOk returns a tuple with the Masquerade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetMasqueradeOk() (*string, bool) {
	if o == nil || o.Masquerade == nil {
		return nil, false
	}
	return o.Masquerade, true
}

// HasMasquerade returns a boolean if a field has been set.
func (o *Rule) HasMasquerade() bool {
	if o != nil && o.Masquerade != nil {
		return true
	}

	return false
}

// SetMasquerade gets a reference to the given string and assigns it to the Masquerade field.
func (o *Rule) SetMasquerade(v string) {
	o.Masquerade = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Rule) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *Rule) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *Rule) SetProtocol(v string) {
	o.Protocol = &v
}

// GetMark returns the Mark field value if set, -1 otherwise.
func (o *Rule) GetMark() int {
	if o == nil || o.Mark == nil {
		var ret int = -1
		return ret
	}
	return *o.Mark
}

// GetMarkOk returns a tuple with the Mark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetMarkOk() (*int, bool) {
	if o == nil || o.Mark == nil {
		return nil, false
	}
	return o.Mark, true
}

// HasMark returns a boolean if a field has been set.
func (o *Rule) HasMark() bool {
	if o != nil && o.Mark != nil {
		return true
	}

	return false
}

// SetMark gets a reference to the given int and assigns it to the Mark field.
func (o *Rule) SetMark(v int) {
	o.Mark = &v
}

// GetMask returns the Mask field value if set, -1 otherwise.
func (o *Rule) GetMask() int {
	if o == nil || o.Mask == nil {
		var ret int = -1
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetMaskOk() (*int, bool) {
	if o == nil || o.Mask == nil {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *Rule) HasMask() bool {
	if o != nil && o.Mask != nil {
		return true
	}

	return false
}

// SetMask gets a reference to the given int and assigns it to the Mask field.
func (o *Rule) SetMask(v int) {
	o.Mask = &v
}

// GetTunid returns the Tunid field value if set, -1 otherwise.
func (o *Rule) GetTunid() uint {
	if o == nil || o.Tunid == nil {
		var ret uint = 0
		return ret
	}
	return *o.Tunid
}

// GetTunidOk returns a tuple with the Tunid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTunidOk() (*uint, bool) {
	if o == nil || o.Tunid == nil {
		return nil, false
	}
	return o.Tunid, true
}

// HasTunid returns a boolean if a field has been set.
func (o *Rule) HasTunid() bool {
	if o != nil && o.Tunid != nil {
		return true
	}

	return false
}

// SetTunid gets a reference to the given int and assigns it to the Tunid field.
func (o *Rule) SetTunid(v uint) {
	o.Tunid = &v
}

// GetGoto returns the Goto field value if set, -1 otherwise.
func (o *Rule) GetGoto() int {
	if o == nil || o.Goto == nil {
		var ret int = -1
		return ret
	}
	return *o.Goto
}

// GetGotoOk returns a tuple with the Goto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetGotoOk() (*int, bool) {
	if o == nil || o.Goto == nil {
		return nil, false
	}
	return o.Goto, true
}

// HasGoto returns a boolean if a field has been set.
func (o *Rule) HasGoto() bool {
	if o != nil && o.Goto != nil {
		return true
	}

	return false
}

// SetGoto gets a reference to the given int and assigns it to the Goto field.
func (o *Rule) SetGoto(v int) {
	o.Goto = &v
}

// GetFlow returns the Flow field value if set, -1 otherwise.
func (o *Rule) GetFlow() int {
	if o == nil || o.Flow == nil {
		var ret int = -1
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetFlowOk() (*int, bool) {
	if o == nil || o.Flow == nil {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *Rule) HasFlow() bool {
	if o != nil && o.Flow != nil {
		return true
	}

	return false
}

// SetFlow gets a reference to the given int and assigns it to the Flow field.
func (o *Rule) SetFlow(v int) {
	o.Flow = &v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Family != nil {
		toSerialize["family"] = o.Family
	}
	if o.Not != nil {
		toSerialize["not"] = o.Not
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if o.Srclen != nil {
		toSerialize["srclen"] = o.Srclen
	}
	if o.Dst != nil {
		toSerialize["dst"] = o.Dst
	}
	if o.Dstlen != nil {
		toSerialize["dstlen"] = o.Dstlen
	}
	if o.Tos != nil {
		toSerialize["tos"] = o.Tos
	}
	if o.Iif != nil {
		toSerialize["iif"] = o.Iif
	}
	if o.Oif != nil {
		toSerialize["oif"] = o.Oif
	}
	if o.Ipproto != nil {
		toSerialize["ipproto"] = o.Ipproto
	}
	if o.Sport != nil {
		toSerialize["sport"] = o.Sport
	}
	if o.Dport != nil {
		toSerialize["dport"] = o.Dport
	}
	if o.SportStart != nil {
		toSerialize["sport_start"] = o.SportStart
	}
	if o.DportStart != nil {
		toSerialize["dport_start"] = o.DportStart
	}
	if o.SportEnd != nil {
		toSerialize["sport_end"] = o.SportEnd
	}
	if o.DportEnd != nil {
		toSerialize["dport_end"] = o.DportEnd
	}
	if o.Table != nil {
		toSerialize["table"] = o.Table
	}
	if o.SuppressPrefixlen != nil {
		toSerialize["suppress_prefixlen"] = o.SuppressPrefixlen
	}
	if o.SuppressIfgroup != nil {
		toSerialize["suppress_ifgroup"] = o.SuppressIfgroup
	}
	if o.Masquerade != nil {
		toSerialize["masquerade"] = o.Masquerade
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.Mark != nil {
		toSerialize["mark"] = o.Mark
	}
	if o.Mask != nil {
		toSerialize["mask"] = o.Mask
	}
	if o.Tunid != nil {
		toSerialize["tunid"] = o.Tunid
	}
	if o.Goto != nil {
		toSerialize["goto"] = o.Goto
	}
	if o.Flow != nil {
		toSerialize["flow"] = o.Flow
	}
	return json.Marshal(toSerialize)
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
