/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.3.0
 * Contact: support@athonet.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Rule IP Rule
type Rule struct {
	Priority *int32 `json:"priority,omitempty"`
	Not *bool `json:"not,omitempty"`
	Src *string `json:"src,omitempty"`
	Srclen *int32 `json:"srclen,omitempty"`
	Dst *string `json:"dst,omitempty"`
	Dstlen *int32 `json:"dstlen,omitempty"`
	Tos *string `json:"tos,omitempty"`
	Iif *string `json:"iif,omitempty"`
	Oif *string `json:"oif,omitempty"`
	Ipproto *string `json:"ipproto,omitempty"`
	Sport *int32 `json:"sport,omitempty"`
	Dport *int32 `json:"dport,omitempty"`
	Table *string `json:"table,omitempty"`
	SuppressPrefixlen *int32 `json:"suppress_prefixlen,omitempty"`
	SuppressIfgroup *string `json:"suppress_ifgroup,omitempty"`
	Masquerade *string `json:"masquerade,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetPriority returns the Priority field value if set, -1 otherwise.
func (o *Rule) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Rule) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *Rule) SetPriority(v int32) {
	o.Priority = &v
}

// GetNot returns the Not field value if set, zero value otherwise.
func (o *Rule) GetNot() bool {
	if o == nil || o.Not == nil {
		var ret bool
		return ret
	}
	return *o.Not
}

// GetNotOk returns a tuple with the Not field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetNotOk() (*bool, bool) {
	if o == nil || o.Not == nil {
		return nil, false
	}
	return o.Not, true
}

// HasNot returns a boolean if a field has been set.
func (o *Rule) HasNot() bool {
	if o != nil && o.Not != nil {
		return true
	}

	return false
}

// SetNot gets a reference to the given bool and assigns it to the Not field.
func (o *Rule) SetNot(v bool) {
	o.Not = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *Rule) GetSrc() string {
	if o == nil || o.Src == nil {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSrcOk() (*string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *Rule) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *Rule) SetSrc(v string) {
	o.Src = &v
}

// GetSrclen returns the Srclen field value if set, -1 otherwise.
func (o *Rule) GetSrclen() int32 {
	if o == nil || o.Srclen == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Srclen
}

// GetSrclenOk returns a tuple with the Srclen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSrclenOk() (*int32, bool) {
	if o == nil || o.Srclen == nil {
		return nil, false
	}
	return o.Srclen, true
}

// HasSrclen returns a boolean if a field has been set.
func (o *Rule) HasSrclen() bool {
	if o != nil && o.Srclen != nil {
		return true
	}

	return false
}

// SetSrclen gets a reference to the given int32 and assigns it to the Srclen field.
func (o *Rule) SetSrclen(v int32) {
	o.Srclen = &v
}

// GetDst returns the Dst field value if set, zero value otherwise.
func (o *Rule) GetDst() string {
	if o == nil || o.Dst == nil {
		var ret string
		return ret
	}
	return *o.Dst
}

// GetDstOk returns a tuple with the Dst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDstOk() (*string, bool) {
	if o == nil || o.Dst == nil {
		return nil, false
	}
	return o.Dst, true
}

// HasDst returns a boolean if a field has been set.
func (o *Rule) HasDst() bool {
	if o != nil && o.Dst != nil {
		return true
	}

	return false
}

// SetDst gets a reference to the given string and assigns it to the Dst field.
func (o *Rule) SetDst(v string) {
	o.Dst = &v
}

// GetDstlen returns the Dstlen field value if set, -1 otherwise.
func (o *Rule) GetDstlen() int32 {
	if o == nil || o.Dstlen == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Dstlen
}

// GetDstlenOk returns a tuple with the Dstlen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDstlenOk() (*int32, bool) {
	if o == nil || o.Dstlen == nil {
		return nil, false
	}
	return o.Dstlen, true
}

// HasDstlen returns a boolean if a field has been set.
func (o *Rule) HasDstlen() bool {
	if o != nil && o.Dstlen != nil {
		return true
	}

	return false
}

// SetDstlen gets a reference to the given int32 and assigns it to the Dstlen field.
func (o *Rule) SetDstlen(v int32) {
	o.Dstlen = &v
}

// GetTos returns the Tos field value if set, zero value otherwise.
func (o *Rule) GetTos() string {
	if o == nil || o.Tos == nil {
		var ret string
		return ret
	}
	return *o.Tos
}

// GetTosOk returns a tuple with the Tos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTosOk() (*string, bool) {
	if o == nil || o.Tos == nil {
		return nil, false
	}
	return o.Tos, true
}

// HasTos returns a boolean if a field has been set.
func (o *Rule) HasTos() bool {
	if o != nil && o.Tos != nil {
		return true
	}

	return false
}

// SetTos gets a reference to the given string and assigns it to the Tos field.
func (o *Rule) SetTos(v string) {
	o.Tos = &v
}

// GetIif returns the Iif field value if set, zero value otherwise.
func (o *Rule) GetIif() string {
	if o == nil || o.Iif == nil {
		var ret string
		return ret
	}
	return *o.Iif
}

// GetIifOk returns a tuple with the Iif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIifOk() (*string, bool) {
	if o == nil || o.Iif == nil {
		return nil, false
	}
	return o.Iif, true
}

// HasIif returns a boolean if a field has been set.
func (o *Rule) HasIif() bool {
	if o != nil && o.Iif != nil {
		return true
	}

	return false
}

// SetIif gets a reference to the given string and assigns it to the Iif field.
func (o *Rule) SetIif(v string) {
	o.Iif = &v
}

// GetOif returns the Oif field value if set, zero value otherwise.
func (o *Rule) GetOif() string {
	if o == nil || o.Oif == nil {
		var ret string
		return ret
	}
	return *o.Oif
}

// GetOifOk returns a tuple with the Oif field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetOifOk() (*string, bool) {
	if o == nil || o.Oif == nil {
		return nil, false
	}
	return o.Oif, true
}

// HasOif returns a boolean if a field has been set.
func (o *Rule) HasOif() bool {
	if o != nil && o.Oif != nil {
		return true
	}

	return false
}

// SetOif gets a reference to the given string and assigns it to the Oif field.
func (o *Rule) SetOif(v string) {
	o.Oif = &v
}

// GetIpproto returns the Ipproto field value if set, zero value otherwise.
func (o *Rule) GetIpproto() string {
	if o == nil || o.Ipproto == nil {
		var ret string
		return ret
	}
	return *o.Ipproto
}

// GetIpprotoOk returns a tuple with the Ipproto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIpprotoOk() (*string, bool) {
	if o == nil || o.Ipproto == nil {
		return nil, false
	}
	return o.Ipproto, true
}

// HasIpproto returns a boolean if a field has been set.
func (o *Rule) HasIpproto() bool {
	if o != nil && o.Ipproto != nil {
		return true
	}

	return false
}

// SetIpproto gets a reference to the given string and assigns it to the Ipproto field.
func (o *Rule) SetIpproto(v string) {
	o.Ipproto = &v
}

// GetSport returns the Sport field value if set, -1 otherwise.
func (o *Rule) GetSport() int32 {
	if o == nil || o.Sport == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Sport
}

// GetSportOk returns a tuple with the Sport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSportOk() (*int32, bool) {
	if o == nil || o.Sport == nil {
		return nil, false
	}
	return o.Sport, true
}

// HasSport returns a boolean if a field has been set.
func (o *Rule) HasSport() bool {
	if o != nil && o.Sport != nil {
		return true
	}

	return false
}

// SetSport gets a reference to the given int32 and assigns it to the Sport field.
func (o *Rule) SetSport(v int32) {
	o.Sport = &v
}

// GetDport returns the Dport field value if set, -1 otherwise.
func (o *Rule) GetDport() int32 {
	if o == nil || o.Dport == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.Dport
}

// GetDportOk returns a tuple with the Dport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDportOk() (*int32, bool) {
	if o == nil || o.Dport == nil {
		return nil, false
	}
	return o.Dport, true
}

// HasDport returns a boolean if a field has been set.
func (o *Rule) HasDport() bool {
	if o != nil && o.Dport != nil {
		return true
	}

	return false
}

// SetDport gets a reference to the given int32 and assigns it to the Dport field.
func (o *Rule) SetDport(v int32) {
	o.Dport = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *Rule) GetTable() string {
	if o == nil || o.Table == nil {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetTableOk() (*string, bool) {
	if o == nil || o.Table == nil {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *Rule) HasTable() bool {
	if o != nil && o.Table != nil {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *Rule) SetTable(v string) {
	o.Table = &v
}

// GetSuppressPrefixlen returns the SuppressPrefixlen field value if set, -1 otherwise.
func (o *Rule) GetSuppressPrefixlen() int32 {
	if o == nil || o.SuppressPrefixlen == nil {
		var ret int32 = -1 
		return ret
	}
	return *o.SuppressPrefixlen
}

// GetSuppressPrefixlenOk returns a tuple with the SuppressPrefixlen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSuppressPrefixlenOk() (*int32, bool) {
	if o == nil || o.SuppressPrefixlen == nil {
		return nil, false
	}
	return o.SuppressPrefixlen, true
}

// HasSuppressPrefixlen returns a boolean if a field has been set.
func (o *Rule) HasSuppressPrefixlen() bool {
	if o != nil && o.SuppressPrefixlen != nil {
		return true
	}

	return false
}

// SetSuppressPrefixlen gets a reference to the given int32 and assigns it to the SuppressPrefixlen field.
func (o *Rule) SetSuppressPrefixlen(v int32) {
	o.SuppressPrefixlen = &v
}

// GetSuppressIfgroup returns the SuppressIfgroup field value if set, zero value otherwise.
func (o *Rule) GetSuppressIfgroup() string {
	if o == nil || o.SuppressIfgroup == nil {
		var ret string
		return ret
	}
	return *o.SuppressIfgroup
}

// GetSuppressIfgroupOk returns a tuple with the SuppressIfgroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetSuppressIfgroupOk() (*string, bool) {
	if o == nil || o.SuppressIfgroup == nil {
		return nil, false
	}
	return o.SuppressIfgroup, true
}

// HasSuppressIfgroup returns a boolean if a field has been set.
func (o *Rule) HasSuppressIfgroup() bool {
	if o != nil && o.SuppressIfgroup != nil {
		return true
	}

	return false
}

// SetSuppressIfgroup gets a reference to the given string and assigns it to the SuppressIfgroup field.
func (o *Rule) SetSuppressIfgroup(v string) {
	o.SuppressIfgroup = &v
}

// GetMasquerade returns the Masquerade field value if set, zero value otherwise.
func (o *Rule) GetMasquerade() string {
	if o == nil || o.Masquerade == nil {
		var ret string
		return ret
	}
	return *o.Masquerade
}

// GetMasqueradeOk returns a tuple with the Masquerade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetMasqueradeOk() (*string, bool) {
	if o == nil || o.Masquerade == nil {
		return nil, false
	}
	return o.Masquerade, true
}

// HasMasquerade returns a boolean if a field has been set.
func (o *Rule) HasMasquerade() bool {
	if o != nil && o.Masquerade != nil {
		return true
	}

	return false
}

// SetMasquerade gets a reference to the given string and assigns it to the Masquerade field.
func (o *Rule) SetMasquerade(v string) {
	o.Masquerade = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Rule) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *Rule) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *Rule) SetProtocol(v string) {
	o.Protocol = &v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Not != nil {
		toSerialize["not"] = o.Not
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if o.Srclen != nil {
		toSerialize["srclen"] = o.Srclen
	}
	if o.Dst != nil {
		toSerialize["dst"] = o.Dst
	}
	if o.Dstlen != nil {
		toSerialize["dstlen"] = o.Dstlen
	}
	if o.Tos != nil {
		toSerialize["tos"] = o.Tos
	}
	if o.Iif != nil {
		toSerialize["iif"] = o.Iif
	}
	if o.Oif != nil {
		toSerialize["oif"] = o.Oif
	}
	if o.Ipproto != nil {
		toSerialize["ipproto"] = o.Ipproto
	}
	if o.Sport != nil {
		toSerialize["sport"] = o.Sport
	}
	if o.Dport != nil {
		toSerialize["dport"] = o.Dport
	}
	if o.Table != nil {
		toSerialize["table"] = o.Table
	}
	if o.SuppressPrefixlen != nil {
		toSerialize["suppress_prefixlen"] = o.SuppressPrefixlen
	}
	if o.SuppressIfgroup != nil {
		toSerialize["suppress_ifgroup"] = o.SuppressIfgroup
	}
	if o.Masquerade != nil {
		toSerialize["masquerade"] = o.Masquerade
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	return json.Marshal(toSerialize)
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


