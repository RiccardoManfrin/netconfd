/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.1.0
 * Contact: support@athonet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A NetworkApiController binds http requests to an api service and writes the service results to the http response
type NetworkApiController struct {
	service NetworkApiServicer
}

// NewNetworkApiController creates a default api controller
func NewNetworkApiController(s NetworkApiServicer) Router {
	return &NetworkApiController{ service: s }
}

// Routes returns all of the api route for the NetworkApiController
func (c *NetworkApiController) Routes() Routes {
	return Routes{ 
		{
			"ConfigGet",
			strings.ToUpper("Get"),
			"/api/1/config",
			c.ConfigGet,
		},
		{
			"ConfigLinkDel",
			strings.ToUpper("Delete"),
			"/api/1/config/links/{ifname}",
			c.ConfigLinkDel,
		},
		{
			"ConfigLinkGet",
			strings.ToUpper("Get"),
			"/api/1/config/links/{ifname}",
			c.ConfigLinkGet,
		},
		{
			"ConfigLinkSet",
			strings.ToUpper("Post"),
			"/api/1/config/links",
			c.ConfigLinkSet,
		},
		{
			"ConfigRouteDel",
			strings.ToUpper("Delete"),
			"/api/1/config/routes/{routeid}",
			c.ConfigRouteDel,
		},
		{
			"ConfigRouteGet",
			strings.ToUpper("Get"),
			"/api/1/config/routes/{routeid}",
			c.ConfigRouteGet,
		},
		{
			"ConfigRouteSet",
			strings.ToUpper("Post"),
			"/api/1/config/routes",
			c.ConfigRouteSet,
		},
		{
			"ConfigSet",
			strings.ToUpper("Post"),
			"/api/1/config",
			c.ConfigSet,
		},
	}
}

// ConfigGet - Configures and enforces a new live network configuration 
func (c *NetworkApiController) ConfigGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ConfigGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinkDel - Brings down and delete a link layer interface 
func (c *NetworkApiController) ConfigLinkDel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	ifname := params["ifname"]
	result, err := c.service.ConfigLinkDel(r.Context(), ifname)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinkGet - Retrieve link layer interface information 
func (c *NetworkApiController) ConfigLinkGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	ifname := params["ifname"]
	result, err := c.service.ConfigLinkGet(r.Context(), ifname)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinkSet - Configures and brings up a link layer interface 
func (c *NetworkApiController) ConfigLinkSet(w http.ResponseWriter, r *http.Request) { 
	link := &Link{}
	if err := json.NewDecoder(r.Body).Decode(&link); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigLinkSet(r.Context(), *link)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRouteDel - Brings down and delete an L3 IP route 
func (c *NetworkApiController) ConfigRouteDel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	routeid := params["routeid"]
	result, err := c.service.ConfigRouteDel(r.Context(), routeid)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRouteGet - Get a L3 route details 
func (c *NetworkApiController) ConfigRouteGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	routeid := params["routeid"]
	result, err := c.service.ConfigRouteGet(r.Context(), routeid)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRouteSet - Configures a route 
func (c *NetworkApiController) ConfigRouteSet(w http.ResponseWriter, r *http.Request) { 
	route := &Route{}
	if err := json.NewDecoder(r.Body).Decode(&route); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigRouteSet(r.Context(), *route)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigSet - Configures and enforces a new live network configuration 
func (c *NetworkApiController) ConfigSet(w http.ResponseWriter, r *http.Request) { 
	config := &Config{}
	if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigSet(r.Context(), *config)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
