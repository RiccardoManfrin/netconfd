/*
 * netConfD API
 *
 * Network Configurator service
 *
 * API version: 0.2.0
 * Contact: support@athonet.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A NetworkApiController binds http requests to an api service and writes the service results to the http response
type NetworkApiController struct {
	service NetworkApiServicer
}

// NewNetworkApiController creates a default api controller
func NewNetworkApiController(s NetworkApiServicer) Router {
	return &NetworkApiController{ service: s }
}

// Routes returns all of the api route for the NetworkApiController
func (c *NetworkApiController) Routes() Routes {
	return Routes{ 
		{
			"ConfigDHCPCreate",
			strings.ToUpper("Post"),
			"/api/1/network/dhcp",
			c.ConfigDHCPCreate,
		},
		{
			"ConfigDHCPDel",
			strings.ToUpper("Delete"),
			"/api/1/network/dhcp/{ifname}",
			c.ConfigDHCPDel,
		},
		{
			"ConfigDHCPGet",
			strings.ToUpper("Get"),
			"/api/1/network/dhcp/{ifname}",
			c.ConfigDHCPGet,
		},
		{
			"ConfigDHCPsGet",
			strings.ToUpper("Get"),
			"/api/1/network/dhcp",
			c.ConfigDHCPsGet,
		},
		{
			"ConfigDNSCreate",
			strings.ToUpper("Post"),
			"/api/1/network/dns",
			c.ConfigDNSCreate,
		},
		{
			"ConfigDNSDel",
			strings.ToUpper("Delete"),
			"/api/1/network/dns/{dnsid}",
			c.ConfigDNSDel,
		},
		{
			"ConfigDNSGet",
			strings.ToUpper("Get"),
			"/api/1/network/dns/{dnsid}",
			c.ConfigDNSGet,
		},
		{
			"ConfigDNSsGet",
			strings.ToUpper("Get"),
			"/api/1/network/dns",
			c.ConfigDNSsGet,
		},
		{
			"ConfigLinkCreate",
			strings.ToUpper("Post"),
			"/api/1/network/links",
			c.ConfigLinkCreate,
		},
		{
			"ConfigLinkDel",
			strings.ToUpper("Delete"),
			"/api/1/network/links/{ifname}",
			c.ConfigLinkDel,
		},
		{
			"ConfigLinkGet",
			strings.ToUpper("Get"),
			"/api/1/network/links/{ifname}",
			c.ConfigLinkGet,
		},
		{
			"ConfigLinksGet",
			strings.ToUpper("Get"),
			"/api/1/network/links",
			c.ConfigLinksGet,
		},
		{
			"ConfigRouteCreate",
			strings.ToUpper("Post"),
			"/api/1/network/routes",
			c.ConfigRouteCreate,
		},
		{
			"ConfigRouteDel",
			strings.ToUpper("Delete"),
			"/api/1/network/routes/{routeid}",
			c.ConfigRouteDel,
		},
		{
			"ConfigRouteGet",
			strings.ToUpper("Get"),
			"/api/1/network/routes/{routeid}",
			c.ConfigRouteGet,
		},
		{
			"ConfigRoutesGet",
			strings.ToUpper("Get"),
			"/api/1/network/routes",
			c.ConfigRoutesGet,
		},
	}
}

// ConfigDHCPCreate - Create DHCP 
func (c *NetworkApiController) ConfigDHCPCreate(w http.ResponseWriter, r *http.Request) { 
	dhcp := &Dhcp{}
	if err := json.NewDecoder(r.Body).Decode(&dhcp); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigDHCPCreate(r.Context(), *dhcp)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDHCPDel - Delete DHCP 
func (c *NetworkApiController) ConfigDHCPDel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	ifname := params["ifname"]
	result, err := c.service.ConfigDHCPDel(r.Context(), ifname)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDHCPGet - Get DHCP 
func (c *NetworkApiController) ConfigDHCPGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	ifname := params["ifname"]
	result, err := c.service.ConfigDHCPGet(r.Context(), ifname)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDHCPsGet - Get All DHCP 
func (c *NetworkApiController) ConfigDHCPsGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ConfigDHCPsGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDNSCreate - Create DNS 
func (c *NetworkApiController) ConfigDNSCreate(w http.ResponseWriter, r *http.Request) { 
	dns := &Dns{}
	if err := json.NewDecoder(r.Body).Decode(&dns); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigDNSCreate(r.Context(), *dns)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDNSDel - Delete DNS 
func (c *NetworkApiController) ConfigDNSDel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	dnsid := params["dnsid"]
	result, err := c.service.ConfigDNSDel(r.Context(), dnsid)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDNSGet - Get DNS 
func (c *NetworkApiController) ConfigDNSGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	dnsid := params["dnsid"]
	result, err := c.service.ConfigDNSGet(r.Context(), dnsid)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigDNSsGet - Get All DNS config 
func (c *NetworkApiController) ConfigDNSsGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ConfigDNSsGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinkCreate - Create New Link 
func (c *NetworkApiController) ConfigLinkCreate(w http.ResponseWriter, r *http.Request) { 
	link := &Link{}
	if err := json.NewDecoder(r.Body).Decode(&link); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigLinkCreate(r.Context(), *link)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinkDel - Delete Link 
func (c *NetworkApiController) ConfigLinkDel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	ifname := params["ifname"]
	result, err := c.service.ConfigLinkDel(r.Context(), ifname)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinkGet - Get Link 
func (c *NetworkApiController) ConfigLinkGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	ifname := params["ifname"]
	result, err := c.service.ConfigLinkGet(r.Context(), ifname)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigLinksGet - Get All Links 
func (c *NetworkApiController) ConfigLinksGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ConfigLinksGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRouteCreate - Create New Route 
func (c *NetworkApiController) ConfigRouteCreate(w http.ResponseWriter, r *http.Request) { 
	route := &Route{}
	if err := json.NewDecoder(r.Body).Decode(&route); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.ConfigRouteCreate(r.Context(), *route)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRouteDel - Delete Route 
func (c *NetworkApiController) ConfigRouteDel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	routeid := params["routeid"]
	result, err := c.service.ConfigRouteDel(r.Context(), routeid)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRouteGet - Get Route 
func (c *NetworkApiController) ConfigRouteGet(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	routeid := params["routeid"]
	result, err := c.service.ConfigRouteGet(r.Context(), routeid)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ConfigRoutesGet - Get All Routes 
func (c *NetworkApiController) ConfigRoutesGet(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.ConfigRoutesGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err, &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
