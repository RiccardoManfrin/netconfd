openapi: 3.0.0
info:
  contact:
    email: support@athonet.com
  description: Network Configurator service
  title: netConfD API
  version: 0.1.0
servers:
- url: /api/1
tags:
- description: System level APIs (e.g. logging, etc..)
  name: System
- description: Network config APIs
  name: Network
paths:
  /config:
    get:
      description: |
        Configures and enforces a new live network configuration
      operationId: ConfigGet
      responses:
        "200":
          description: Successful alignment
      summary: |
        Configures and enforces a new live network configuration
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    put:
      description: |
        Configures and enforces a new live network configuration
      operationId: ConfigSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
        description: Full Config
        required: true
      responses:
        "400":
          description: Bad Request (malformed/bad syntax/validation errors)
        "200":
          description: Successful alignment
      summary: |
        Configures and enforces a new live network configuration
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/links:
    get:
      description: |
        Returns the array of the existing link layer interfaces by their ifname id
      operationId: ConfigLinksGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/link'
                type: array
          description: Sucessful retrieval
      summary: |
        Get all link layer interfaces
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures and brings up a link layer interface.
        If the link exists return an error
      operationId: ConfigLinkCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link'
        description: Link Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ifname'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures and brings up a link layer interface
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/links/{ifname}:
    delete:
      description: |
        Brings down and delete a link layer interface
      operationId: ConfigLinkDel
      parameters:
      - explode: false
        in: path
        name: ifname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Brings down and delete a link layer interface
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Retrieve link layer interface information
      operationId: ConfigLinkGet
      parameters:
      - explode: false
        in: path
        name: ifname
        required: true
        schema:
          $ref: '#/components/schemas/ifname'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Retrieve link layer interface information
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/routes:
    get:
      description: |
        Returns the array of the existing routing tables routes ids
      operationId: ConfigRoutesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/route'
                type: array
          description: Sucessful retrieval
      summary: |
        Get all routing table routes
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures a L3 route on the main routing table
      operationId: ConfigRouteCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/route'
        description: Route Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/routeid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures a route
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/routes/{routeid}:
    delete:
      description: |
        Brings down and delete an L3 IP route
      operationId: ConfigRouteDel
      parameters:
      - explode: false
        in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Brings down and delete an L3 IP route
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a L3 route details
      operationId: ConfigRouteGet
      parameters:
      - explode: false
        in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/routeid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a L3 route details
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/rules:
    get:
      description: |
        Get all ip rules list
      operationId: ConfigRulesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ruleid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get all ip rules list
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures a L3 IP rule on the main routing table
      operationId: ConfigRuleCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule'
        description: Rule Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ruleid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an IP rule
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/rules/{ruleid}:
    delete:
      description: |
        Removes an IP Rule
      operationId: ConfigRuleDel
      parameters:
      - explode: false
        in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes an IP Rule
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get an IP rule details
      operationId: ConfigRuleGet
      parameters:
      - explode: false
        in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get an IP rule details
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/netns:
    get:
      description: |
        Get the list all network namespaces
      operationId: ConfigNetNSsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/netnsid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get the list all network namespaces
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures an new Network Namespace
      operationId: ConfigNetNSCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netns'
        description: Network Namespace Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/netnsid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an new Network Namespace
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/netns/{netnsid}:
    delete:
      description: |
        Removes an IP Rule
      operationId: ConfigNetNSDel
      parameters:
      - explode: false
        in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes an IP Rule
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a network namespace
      operationId: ConfigNetNSGet
      parameters:
      - explode: false
        in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a network namespace
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/vrfs:
    get:
      description: |
        Get the list all VRFs
      operationId: ConfigVRFsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/vrfid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get the list all VRFs
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures an new VRF
      operationId: ConfigVRFCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vrf'
        description: VRF Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/vrfid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an new VRF
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/vrfs/{vrfid}:
    delete:
      description: |
        Removes a VRF
      operationId: ConfigVRFDel
      parameters:
      - explode: false
        in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes a VRF
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a VRF
      operationId: ConfigVRFGet
      parameters:
      - explode: false
        in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a VRF
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/nftables:
    get:
      description: |
        Get the list all NFTables
      operationId: ConfigNFTablesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/nftableid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get the list all NFTables
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures an new NFTable
      operationId: ConfigNFTableCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nftable'
        description: NFTable Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/nftableid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an new NFTable
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/ntables/{nftableid}:
    delete:
      description: |
        Removes a NFTable
      operationId: ConfigNFTableDel
      parameters:
      - explode: false
        in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes a NFTable
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a NFTable
      operationId: ConfigNFTableGet
      parameters:
      - explode: false
        in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a NFTable
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
components:
  schemas:
    ipv4:
      format: ipv4
      type: string
    ipv6:
      format: ipv6
      type: string
    ip:
      example: 10.1.2.3
      oneOf:
      - $ref: '#/components/schemas/ipv4'
      - $ref: '#/components/schemas/ipv6'
    default:
      description: This is equivalent to 0.0.0.0/0 or ::/0
      enum:
      - default
      type: string
    routeid:
      description: Incremental route identifier
      example: 42
      type: integer
    ruleid:
      description: Incremental rule identifier
      example: 42
      type: integer
    netnsid:
      description: Network namespace identifier
      example: yanetnamespace
      type: string
    vrfid:
      description: VRF identifier
      example: 42
      type: integer
    nftableid:
      description: Net Filter Table identifier
      example: 42
      type: integer
    ifname:
      description: |
        Interface name
      example: dummy0
      maxLength: 15
      type: string
    scope:
      description: scope of the object (link or global)
      enum:
      - link
      - global
      type: string
    route_flags:
      type: string
    route_dst:
      oneOf:
      - $ref: '#/components/schemas/ip'
      - $ref: '#/components/schemas/default'
    config:
      properties:
        global:
          type: object
        host_network:
          $ref: '#/components/schemas/network'
      type: object
    network:
      properties:
        links:
          description: Series of links layer interfaces to configure within the namespace
          items:
            $ref: '#/components/schemas/link'
          type: array
        routes:
          description: Namespace routes
          items:
            $ref: '#/components/schemas/route'
          type: array
      type: object
    rule:
      description: IP Rule type
      type: object
    netns:
      description: Network Namespace
      properties:
        name:
          description: Network namespace identifier
          example: yanetnamespace
          type: string
      type: object
    nftable:
      description: Net Filter Table
      type: object
    macaddr:
      description: MAC L2 interface HW address
      example: 08:00:27:76:4f:05
      type: string
    vrf:
      description: Virtual Routing and Forwarding object
      type: object
    route:
      description: IP L3 Ruote entry
      example:
        prefsrc: 10.1.2.3
        protocol: protocol
        dev: dummy0
        metric: 0
        __id: 42
        flags:
        - null
        - null
        gateway: 10.1.2.3
      properties:
        __id:
          description: Incremental route identifier
          example: 42
          type: integer
        dst:
          $ref: '#/components/schemas/route_dst'
        gateway:
          $ref: '#/components/schemas/ip'
        dev:
          description: |
            Interface name
          example: dummy0
          maxLength: 15
          type: string
        protocol:
          type: string
        metric:
          type: integer
        scope:
          $ref: '#/components/schemas/scope'
        prefsrc:
          $ref: '#/components/schemas/ip'
        flags:
          description: Route flags
          items:
            $ref: '#/components/schemas/route_flags'
          type: array
      type: object
    link:
      example:
        link_type: ether
        ifindex: 0
        address: address
        ifname: dummy0
        promiscuity: 1
        flags:
        - UP
        - UP
        addr_info:
        - broadcast: broadcast
          prefixlen: 5
          local: 10.1.2.3
        - broadcast: broadcast
          prefixlen: 5
          local: 10.1.2.3
        mtu: 6
        master: bond0
        linkinfo:
          info_kind: device
          info_slave_kind: bond
          info_slave_data:
            state: ACTIVE
            mii_status: UP
            perm_hwaddr: 08:00:27:76:4f:05
            link_failure_count: 0
            queue_id: 0
          info_data:
            updelay: 0
            arp_validate: none
            num_peer_notif: 1
            lp_interval: 1
            arp_all_targets: any
            packets_per_slave: 1
            fail_over_mac: none
            xmit_hash_policy: layer2
            miimon: 100
            resend_igmp: 1
            min_links: 0
            downdelay: 0
            arp_interval: 0
            primary_reselect: always
            tlb_dynamic_lb: 1
            peer_notify_delay: 0
            ad_select: stable
            ad_lacp_rate: slow
            mode: active-backup
            all_slaves_active: 0
            use_carrier: 1
      properties:
        ifindex:
          description: |
            Inteface index ID
          type: integer
        ifname:
          description: |
            Interface name
          example: dummy0
          maxLength: 15
          type: string
        flags:
          description: |
            Flags of the interface Supported types:
              * `BROADCAST` - Support for broadcast
              * `MULTICAST` - Support for multicast
              * `SLAVE` - Is slave
              * `UP` - Is up
              * `LOWER UP` - Is lower interface up
          items:
            enum:
            - BROADCAST
            - MULTICAST
            - SLAVE
            - UP
            - LOWER_UP
            example: UP
            type: string
          type: array
        mtu:
          description: |
            Maximum Transfer Unit value
          type: integer
        promiscuity:
          description: Promiscuous mode flag
          type: integer
        master:
          allOf:
          - $ref: '#/components/schemas/ifname'
          description: |
            In case the interface is part of a bond or bridge, specifies
            the bond/bridge interface it belongs to.
          example: bond0
        linkinfo:
          $ref: '#/components/schemas/link_linkinfo'
        link_type:
          enum:
          - ether
          - loopback
          - ppp
          type: string
        address:
          type: string
        addr_info:
          items:
            $ref: '#/components/schemas/link_addr_info'
          type: array
      required:
      - ifname
      - link_type
      type: object
    link_linkinfo_info_slave_data:
      description: Info about slave state/config
      example:
        state: ACTIVE
        mii_status: UP
        perm_hwaddr: 08:00:27:76:4f:05
        link_failure_count: 0
        queue_id: 0
      properties:
        state:
          description: |
            State of the link:
              * `ACTIVE` - Link is actively used
              * `BACKUP` - Link is used for failover
          enum:
          - ACTIVE
          - BACKUP
          example: ACTIVE
          type: string
        mii_status:
          description: "MII Status:\n  * `UP` \n  * `DOWN`\n"
          enum:
          - UP
          - DOWN
          example: UP
          type: string
        link_failure_count:
          description: |
            Number of link failures
          example: 0
          type: integer
        perm_hwaddr:
          description: MAC L2 interface HW address
          example: 08:00:27:76:4f:05
          type: string
        queue_id:
          description: |
            Queue Identifier
          example: 0
          type: integer
      type: object
    link_linkinfo_info_data:
      description: Additional information on the link
      example:
        updelay: 0
        arp_validate: none
        num_peer_notif: 1
        lp_interval: 1
        arp_all_targets: any
        packets_per_slave: 1
        fail_over_mac: none
        xmit_hash_policy: layer2
        miimon: 100
        resend_igmp: 1
        min_links: 0
        downdelay: 0
        arp_interval: 0
        primary_reselect: always
        tlb_dynamic_lb: 1
        peer_notify_delay: 0
        ad_select: stable
        ad_lacp_rate: slow
        mode: active-backup
        all_slaves_active: 0
        use_carrier: 1
      properties:
        mode:
          description: |
            Bonding modes. Supported Modes:
              * `balance-rr` - Round-robin: Transmit network packets in sequential order from the first available network interface (NIC) slave through the last. This mode provides load balancing and fault tolerance.
              * `active-backup` - Active-backup: Only one NIC slave in the bond is active. A different slave becomes active if, and only if, the active slave fails. The single logical bonded interface's MAC address is externally visible on only one NIC (port) to avoid distortion in the network switch. This mode provides fault tolerance.
              * `balance-xor` - XOR: Transmit network packets based on a hash of the packet's source and destination. The default algorithm only considers MAC addresses (layer2). Newer versions allow selection of additional policies based on IP addresses (layer2+3) and TCP/UDP port numbers (layer3+4). This selects the same NIC slave for each destination MAC address, IP address, or IP address and port combination, respectively. This mode provides load balancing and fault tolerance.
              * `broadcast` - Broadcast: Transmit network packets on all slave network interfaces. This mode provides fault tolerance.
              * `802.3ad` - IEEE 802.3ad Dynamic link aggregation: Creates aggregation groups that share the same speed and duplex settings. Utilizes all slave network interfaces in the active aggregator group according to the 802.3ad specification. This mode is similar to the XOR mode above and supports the same balancing policies. The link is set up dynamically between two LACP-supporting peers.
              * `balance-tlb` - Adaptive transmit load balancing: Linux bonding driver mode that does not require any special network-switch support. The outgoing network packet traffic is distributed according to the current load (computed relative to the speed) on each network interface slave. Incoming traffic is received by one currently designated slave network interface. If this receiving slave fails, another slave takes over the MAC address of the failed receiving slave.
              * `balance-alb` - Adaptive load balancing: includes balance-tlb plus receive load balancing (rlb) for IPV4 traffic, and does not require any special network switch support. The receive load balancing is achieved by ARP negotiation. The bonding driver intercepts the ARP Replies sent by the local system on their way out and overwrites the source hardware address with the unique hardware address of one of the NIC slaves in the single logical bonded interface such that different network-peers use different MAC addresses for their network packet traffic.
          enum:
          - balance-rr
          - active-backup
          - balance-xor
          - broadcast
          - 802.3ad
          - balance-tlb
          - balance-alb
          example: active-backup
          type: string
        miimon:
          description: "Specifies the MII link monitoring frequency in milliseconds.\
            \ \nThe default value is 0, and this will disable the MII monitor\n"
          example: 100
          type: integer
        updelay:
          description: "Specifies the time, in milliseconds, to wait before enabling\
            \ a slave after a \nlink recovery has been detected. The updelay value\
            \ must be a multiple of the miimon value\n"
          example: 0
          type: integer
        downdelay:
          description: "Specifies the time, in milliseconds, to wait before disabling\
            \ a slave after a \nlink failure has been detected. The downdelay value\
            \ must be a multiple of the miimon value.\n"
          example: 0
          type: integer
        peer_notify_delay:
          description: |
            Specify the delay, in milliseconds, between each peer
            notification (gratuitous ARP and unsolicited IPv6 Neighbor
            Advertisement) when they are issued after a failover event.
            This delay should be a multiple of the link monitor interval
            (arp_interval or miimon, whichever is active). The default
            value is 0 which means to match the value of the link monitor
            interval.
          example: 0
          type: integer
        use_carrier:
          description: |-
            Specifies whether or not miimon should use MII or ETHTOOL ioctls vs. netif_carrier_ok() to determine the link status. The MII or ETHTOOL ioctls are less efficient and utilize a deprecated calling sequence within the kernel.  The netif_carrier_ok() relies on the device driver to maintain its state with netif_carrier_on/off; at this writing, most, but not all, device drivers support this facility.
            If bonding insists that the link is up when it should not be, it may be that your network device driver does not support netif_carrier_on/off.  The default state for netif_carrier is "carrier on," so if a driver does not support netif_carrier, it will appear as if the link is always up.  In this case, setting use_carrier to 0 will cause bonding to revert to the MII / ETHTOOL ioctl method to determine the link state.
            A value of 1 enables the use of netif_carrier_ok(), a value of 0 will use the deprecated MII / ETHTOOL ioctls.  The default value is 1.
          example: 1
          type: integer
        arp_interval:
          description: |
            Specifies the ARP link monitoring frequency in milliseconds.
            The ARP monitor works by periodically checking the slave devices to determine whether they have sent or received traffic recently (the precise criteria depends upon the bonding mode, and the state of the slave).  Regular traffic is generated via ARP probes issued for the addresses specified by the arp_ip_target option.
            This behavior can be modified by the arp_validate option, below.
            If ARP monitoring is used in an etherchannel compatible mode (modes 0 and 2), the switch should be configured in a mode that evenly distributes packets across all links. If the switch is configured to distribute the packets in an XOR fashion, all replies from the ARP targets will be received on the same link which could cause the other team members to fail.  ARP monitoring should not be used in conjunction with miimon.  A value of 0 disables ARP monitoring.  The default value is 0.
          example: 0
          type: integer
        arp_validate:
          description: |
            Specifies whether or not ARP probes and replies should be validated in any mode that supports arp monitoring, or whether non-ARP traffic should be filtered (disregarded) for link monitoring purposes.
            Possible values are:
            * `none` - or 0
            No validation or filtering is performed.
            * `active` - or 1
            Validation is performed only for the active slave.
            * `backup` - or 2
            Validation is performed only for backup slaves.
            * `all` - or 3
            Validation is performed for all slaves.
            * `filter` - or 4
            Filtering is applied to all slaves. No validation is performed.
            * `filter_active` - or 5
            Filtering is applied to all slaves, validation is performed only for the active slave.
            * `filter_backup` - or 6
            Filtering is applied to all slaves, validation is performed only for backup slaves.
          enum:
          - none
          - active
          - backup
          - all
          - filter
          - filter_active
          - filter_backup
          type: string
        arp_all_targets:
          description: |
            Specifies the quantity of arp_ip_targets that must be reachable in order for the ARP monitor to consider a slave as being up. This option affects only active-backup mode for slaves with arp_validation enabled.
            Possible values are:
            * `any` - or 0
              consider the slave up only when any of the arp_ip_targets
              is reachable

            * `all` - or 1
              consider the slave up only when all of the arp_ip_targets
              are reachable
          enum:
          - any
          - all
          example: any
          type: string
        primary_reselect:
          description: |
            Specifies the reselection policy for the primary slave.  This affects how the primary slave is chosen to become the active slave when failure of the active slave or recovery of the primary slave occurs.  This option is designed to prevent flip-flopping between the primary slave and other slaves.  Possible values are:

              * `always` - or 0 (default)
                The primary slave becomes the active slave whenever it
                comes back up.
              * `better` - or 1
                The primary slave becomes the active slave when it comes
                back up, if the speed and duplex of the primary slave is
                better than the speed and duplex of the current active
                slave.
              * `failure` - or 2
                The primary slave becomes the active slave only if the
                current active slave fails and the primary slave is up.

            The primary_reselect setting is ignored in two cases:

              * If no slaves are active, the first slave to recover is
                made the active slave.

              * When initially enslaved, the primary slave is always made
                the active slave.

            Changing the primary_reselect policy via sysfs will cause an immediate selection of the best active slave according to the new policy.  This may or may not result in a change of the active slave, depending upon the circumstances.
            This option was added for bonding version 3.6.0.
          enum:
          - always
          - better
          - slave
          example: always
          type: string
        fail_over_mac:
          description: |
            Specifies whether active-backup mode should set all slaves to the same MAC address at enslavement (the traditional behavior), or, when enabled, perform special handling of the bond's MAC address in accordance with the selected policy. The default policy is none, unless the first slave cannot change its MAC address, in which case the active policy is selected by default. This option may be modified via sysfs only when no slaves are present in the bond. This option was added in bonding version 3.2.0.  The "follow" policy was added in bonding version 3.3.0. Possible values are:
              * `none` - or 0
              This setting disables fail_over_mac, and causes
              bonding to set all slaves of an active-backup bond to
              the same MAC address at enslavement time.  This is the
              default.
              * `active` - or 1
              The "active" fail_over_mac policy indicates that the
              MAC address of the bond should always be the MAC
              address of the currently active slave.  The MAC
              address of the slaves is not changed; instead, the MAC
              address of the bond changes during a failover.
              This policy is useful for devices that cannot ever
              alter their MAC address, or for devices that refuse
              incoming broadcasts with their own source MAC (which
              interferes with the ARP monitor).
              The down side of this policy is that every device on
              the network must be updated via gratuitous ARP,
              vs. just updating a switch or set of switches (which
              often takes place for any traffic, not just ARP
              traffic, if the switch snoops incoming traffic to
              update its tables) for the traditional method.  If the
              gratuitous ARP is lost, communication may be
              disrupted.
              When this policy is used in conjunction with the mii
              monitor, devices which assert link up prior to being
              able to actually transmit and receive are particularly
              susceptible to loss of the gratuitous ARP, and an
              appropriate updelay setting may be required.
              * `follow` - or 2
              The "follow" fail_over_mac policy causes the MAC
              address of the bond to be selected normally (normally
              the MAC address of the first slave added to the bond).
              However, the second and subsequent slaves are not set
              to this MAC address while they are in a backup role; a
              slave is programmed with the bond's MAC address at
              failover time (and the formerly active slave receives
              the newly active slave's MAC address).
              This policy is useful for multiport devices that
              either become confused or incur a performance penalty
              when multiple ports are programmed with the same MAC
              address.
          enum:
          - none
          - active
          - follow
          example: none
          type: string
        xmit_hash_policy:
          description: |
            Hash policy to route packets on different bond interfaces.  Supported Modes:
              * `layer2` - Hash is made on L2 metadata (default)
              * `layer2+3` - Hash is made on L2 and L3 metadata
              * `layer3+4` - Hash is made on L3 and L4 metadata
          enum:
          - layer2
          - layer2+3
          - layer3+4
          example: layer2
          type: string
        resend_igmp:
          description: |
            Specifies the number of IGMP membership reports to be issued after
            a failover event. One membership report is issued immediately after
            the failover, subsequent packets are sent in each 200ms interval.

            The valid range is 0 - 255; the default value is 1. A value of 0
            prevents the IGMP membership report from being issued in response
            to the failover event.

            This option is useful for bonding modes balance-rr (0), active-backup
            (1), balance-tlb (5) and balance-alb (6), in which a failover can
            switch the IGMP traffic from one slave to another.  Therefore a fresh
            IGMP report must be issued to cause the switch to forward the incoming
            IGMP traffic over the newly selected slave.

            This option was added for bonding version 3.7.0.
          example: 1
          type: integer
        num_peer_notif:
          description: |
            Specify the number of peer notifications (gratuitous ARPs and
            unsolicited IPv6 Neighbor Advertisements) to be issued after a
            failover event.  As soon as the link is up on the new slave
            (possibly immediately) a peer notification is sent on the
            bonding device and each VLAN sub-device. This is repeated at
            the rate specified by peer_notif_delay if the number is
            greater than 1.

            The valid range is 0 - 255; the default value is 1.  These options
            affect only the active-backup mode.  These options were added for
            bonding versions 3.3.0 and 3.4.0 respectively.

            From Linux 3.0 and bonding version 3.7.1, these notifications
            are generated by the ipv4 and ipv6 code and the numbers of
            repetitions cannot be set independently.
          example: 1
          type: integer
        all_slaves_active:
          description: |
            Specifies that duplicate frames (received on inactive ports) should be
            dropped (0) or delivered (1).

            Normally, bonding will drop duplicate frames (received on inactive
            ports), which is desirable for most users. But there are some times
            it is nice to allow duplicate frames to be delivered.

            The default value is 0 (drop duplicate frames received on inactive
            ports).
          example: 0
          type: integer
        min_links:
          description: |
            Specifies the minimum number of links that must be active before
            asserting carrier. It is similar to the Cisco EtherChannel min-links
            feature. This allows setting the minimum number of member ports that
            must be up (link-up state) before marking the bond device as up
            (carrier on). This is useful for situations where higher level services
            such as clustering want to ensure a minimum number of low bandwidth
            links are active before switchover. This option only affect 802.3ad
            mode.

            The default value is 0. This will cause carrier to be asserted (for
            802.3ad mode) whenever there is an active aggregator, regardless of the
            number of available links in that aggregator. Note that, because an
            aggregator cannot be active without at least one available link,
            setting this option to 0 or to 1 has the exact same effect.
          example: 0
          type: integer
        lp_interval:
          description: |
            Specifies the number of seconds between instances where the bonding
            driver sends learning packets to each slaves peer switch.

            The valid range is 1 - 0x7fffffff; the default value is 1. This Option
            has effect only in balance-tlb and balance-alb modes.
          example: 1
          type: integer
        packets_per_slave:
          description: |
            Specify the number of packets to transmit through a slave before
            moving to the next one. When set to 0 then a slave is chosen at
            random.

            The valid range is 0 - 65535; the default value is 1. This option
            has effect only in balance-rr mode.
          example: 1
          type: integer
        ad_lacp_rate:
          description: |
            Rate at which LACP control packets are sent to an LACP-supported interface Supported Modes:
              * `slow` - LACP Slow Rate (less bandwidth, default)
              * `fast` - LACP Fast Rate (faster fault detection)
          enum:
          - slow
          - fast
          example: slow
          type: string
        ad_select:
          description: "Specifies the 802.3ad aggregation selection logic to use.\
            \  The possible values and their effects are:\n  * `stable` - or 0\n \
            \   The active aggregator is chosen by largest aggregate\n    bandwidth.\n\
            \    Reselection of the active aggregator occurs only when all\n    slaves\
            \ of the active aggregator are down or the active\n    aggregator has\
            \ no slaves.\n    This is the default value.\n  * `bandwidth` or 1\n \
            \   The active aggregator is chosen by largest aggregate\n    bandwidth.\
            \  Reselection occurs if:\n    - A slave is added to or removed from the\
            \ bond\n    - Any slave's link state changes\n    - Any slave's 802.3ad\
            \ association state changes\n    - The bond's administrative state changes\
            \ to up\n  * `count` - or 2\n    The active aggregator is chosen by the\
            \ largest number of\n    ports (slaves).  Reselection occurs as described\
            \ under the\n    \"bandwidth\" setting, above.\n    \nThe bandwidth and\
            \ count selection policies permit failover of 802.3ad aggregations when\
            \ partial failure of the active aggregator occurs.  This keeps the aggregator\
            \ with the highest availability (either in bandwidth or in number of ports)\
            \ active at all times.\nThis option was added in bonding version 3.4.0.\n"
          enum:
          - stable
          - bandwidth
          - count
          example: stable
          type: string
        tlb_dynamic_lb:
          description: |
            Specifies if dynamic shuffling of flows is enabled in tlb
            mode. The value has no effect on any other modes.

            The default behavior of tlb mode is to shuffle active flows across
            slaves based on the load in that interval. This gives nice lb
            characteristics but can cause packet reordering. If re-ordering is
            a concern use this variable to disable flow shuffling and rely on
            load balancing provided solely by the hash distribution.
            xmit-hash-policy can be used to select the appropriate hashing for
            the setup.

            The sysfs entry can be used to change the setting per bond device
            and the initial value is derived from the module parameter. The
            sysfs entry is allowed to be changed only if the bond device is
            down.

            The default value is "1" that enables flow shuffling while value "0"
            disables it. This option was added in bonding driver 3.7.1
          example: 1
          type: integer
      type: object
    link_linkinfo:
      description: |
        Additional link info attributes
      example:
        info_kind: device
        info_slave_kind: bond
        info_slave_data:
          state: ACTIVE
          mii_status: UP
          perm_hwaddr: 08:00:27:76:4f:05
          link_failure_count: 0
          queue_id: 0
        info_data:
          updelay: 0
          arp_validate: none
          num_peer_notif: 1
          lp_interval: 1
          arp_all_targets: any
          packets_per_slave: 1
          fail_over_mac: none
          xmit_hash_policy: layer2
          miimon: 100
          resend_igmp: 1
          min_links: 0
          downdelay: 0
          arp_interval: 0
          primary_reselect: always
          tlb_dynamic_lb: 1
          peer_notify_delay: 0
          ad_select: stable
          ad_lacp_rate: slow
          mode: active-backup
          all_slaves_active: 0
          use_carrier: 1
      properties:
        info_slave_kind:
          description: |
            Info on the type of slave
            Supported types:
              * `bond`
              * `bridge`
          enum:
          - bond
          - bridge
          example: bond
          type: string
        info_slave_data:
          $ref: '#/components/schemas/link_linkinfo_info_slave_data'
        info_kind:
          description: "Type of link layer interface. Supported Types:\n  * `device`-\
            \ Physical device\n  * `dummy` - Dummy link type interface for binding\
            \ intenal services\n  * `bridge` - Link layer virtual switch type interface\n\
            \  * `bond` - Bond type interface letting two interfaces be seen as one\n\
            \  * `vlan` - Virtual LAN (TAG ID based) interface\n  * `veth` - Virtual\
            \ ethernet (with virtual MAC and IP address)\n  * `macvlan` - Direct virtual\
            \ eth interface connected to the physical interface, \n    with owned\
            \ mac address\n  * `ipvlan` - Direct virtual eth interface connected to\
            \ the physical interface.\n    Physical interface MAC address is reused.\
            \ L2 type directly connects the lan to \n    the host phyisical device.\
            \ L3 type adds a routing layer in between.\n  * `tuntap` - Link for to\
            \ kernel-to-userspace packet forward\n"
          enum:
          - device
          - dummy
          - bridge
          - bond
          - vlan
          - veth
          - macvlan
          - ipvlan
          - ppp
          type: string
        info_data:
          $ref: '#/components/schemas/link_linkinfo_info_data'
      type: object
    link_addr_info:
      example:
        broadcast: broadcast
        prefixlen: 5
        local: 10.1.2.3
      properties:
        local:
          $ref: '#/components/schemas/ip'
        prefixlen:
          type: integer
        broadcast:
          type: string
      type: object
