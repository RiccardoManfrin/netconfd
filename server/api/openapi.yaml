openapi: 3.0.0
info:
  contact:
    email: support@athonet.com
  description: Network Configurator service
  title: netConfD API
  version: 0.1.0
servers:
- url: /api/1
tags:
- description: System level APIs (e.g. logging, etc..)
  name: System
- description: Network config APIs
  name: Network
paths:
  /config:
    get:
      description: |
        Configures and enforces a new live network configuration
      operationId: ConfigGet
      responses:
        "200":
          description: Successful alignment
      summary: |
        Configures and enforces a new live network configuration
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    put:
      description: |
        Configures and enforces a new live network configuration
      operationId: ConfigSet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
        description: Full Config
        required: true
      responses:
        "200":
          description: Successful alignment
      summary: |
        Configures and enforces a new live network configuration
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/links:
    get:
      description: |
        Returns the array of the existing link layer interfaces by their ifname id
      operationId: ConfigLinksGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/link'
                type: array
          description: Sucessful retrieval
      summary: |
        Get all link layer interfaces
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures and brings up a link layer interface.
        If the link exists return an error
      operationId: ConfigLinkCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link'
        description: Link Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ifname'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures and brings up a link layer interface
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/links/{ifname}:
    delete:
      description: |
        Brings down and delete a link layer interface
      operationId: ConfigLinkDel
      parameters:
      - explode: false
        in: path
        name: ifname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Brings down and delete a link layer interface
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Retrieve link layer interface information
      operationId: ConfigLinkGet
      parameters:
      - explode: false
        in: path
        name: ifname
        required: true
        schema:
          $ref: '#/components/schemas/ifname'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Retrieve link layer interface information
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/routes:
    get:
      description: |
        Returns the array of the existing routing tables routes ids
      operationId: ConfigRoutesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/route'
                type: array
          description: Sucessful retrieval
      summary: |
        Get all routing table routes
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures a L3 route on the main routing table
      operationId: ConfigRouteCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/route'
        description: Route Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/routeid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures a route
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/routes/{routeid}:
    delete:
      description: |
        Brings down and delete an L3 IP route
      operationId: ConfigRouteDel
      parameters:
      - explode: false
        in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Brings down and delete an L3 IP route
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a L3 route details
      operationId: ConfigRouteGet
      parameters:
      - explode: false
        in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/routeid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a L3 route details
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/rules:
    get:
      description: |
        Get all ip rules list
      operationId: ConfigRulesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ruleid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get all ip rules list
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures a L3 IP rule on the main routing table
      operationId: ConfigRuleCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule'
        description: Rule Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ruleid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an IP rule
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/rules/{ruleid}:
    delete:
      description: |
        Removes an IP Rule
      operationId: ConfigRuleDel
      parameters:
      - explode: false
        in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes an IP Rule
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get an IP rule details
      operationId: ConfigRuleGet
      parameters:
      - explode: false
        in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get an IP rule details
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/netns:
    get:
      description: |
        Get the list all network namespaces
      operationId: ConfigNetNSsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/netnsid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get the list all network namespaces
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures an new Network Namespace
      operationId: ConfigNetNSCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netns'
        description: Network Namespace Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/netnsid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an new Network Namespace
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/netns/{netnsid}:
    delete:
      description: |
        Removes an IP Rule
      operationId: ConfigNetNSDel
      parameters:
      - explode: false
        in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes an IP Rule
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a network namespace
      operationId: ConfigNetNSGet
      parameters:
      - explode: false
        in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a network namespace
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/vrfs:
    get:
      description: |
        Get the list all VRFs
      operationId: ConfigVRFsGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/vrfid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get the list all VRFs
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures an new VRF
      operationId: ConfigVRFCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vrf'
        description: VRF Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/vrfid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an new VRF
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/vrfs/{vrfid}:
    delete:
      description: |
        Removes a VRF
      operationId: ConfigVRFDel
      parameters:
      - explode: false
        in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes a VRF
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a VRF
      operationId: ConfigVRFGet
      parameters:
      - explode: false
        in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a VRF
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
  /config/nftables:
    get:
      description: |
        Get the list all NFTables
      operationId: ConfigNFTablesGet
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/nftableid'
                type: array
          description: Sucessful retrieval
      summary: |
        Get the list all NFTables
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
    post:
      description: |
        Configures an new NFTable
      operationId: ConfigNFTableCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nftable'
        description: NFTable Config
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/nftableid'
                type: array
          description: Successful creation
        "409":
          description: Resource already exists, or request is incompatible with current
            network state
        "400":
          description: Resource config is semantically or syntactically incorrect
      summary: |
        Configures an new NFTable
      tags:
      - Network
      x-authorization:
      - config
      - admin
  /config/ntables/{nftableid}:
    delete:
      description: |
        Removes a NFTable
      operationId: ConfigNFTableDel
      parameters:
      - explode: false
        in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
        style: simple
      responses:
        "200":
          description: Successful delete
        "404":
          description: Not found
      summary: |
        Removes a NFTable
      tags:
      - Network
      x-authorization:
      - config
      - admin
    get:
      description: |
        Get a NFTable
      operationId: ConfigNFTableGet
      parameters:
      - explode: false
        in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
        style: simple
      responses:
        "200":
          description: Successful get
        "404":
          description: Not found
      summary: |
        Get a NFTable
      tags:
      - Network
      x-authorization:
      - config
      - admin
      - monitor
components:
  schemas:
    ipv4:
      format: ipv4
      type: string
    ipv6:
      format: ipv6
      type: string
    ip:
      example: 10.1.2.3
      oneOf:
      - $ref: '#/components/schemas/ipv4'
      - $ref: '#/components/schemas/ipv6'
    default:
      description: This is equivalent to 0.0.0.0/0 or ::/0
      enum:
      - default
      type: string
    routeid:
      description: Incremental route identifier
      example: 42
      type: integer
    ruleid:
      description: Incremental rule identifier
      example: 42
      type: integer
    netnsid:
      description: Network namespace identifier
      example: yanetnamespace
      type: string
    vrfid:
      description: VRF identifier
      example: 42
      type: integer
    nftableid:
      description: Net Filter Table identifier
      example: 42
      type: integer
    linkid:
      $ref: '#/components/schemas/ifname'
    ifname:
      description: |
        Interface name
      example: dummy0
      maxLength: 15
      type: string
    scope:
      description: scope of the object (link or global)
      enum:
      - link
      - global
      type: string
    route_flags:
      type: string
    route_dst:
      oneOf:
      - $ref: '#/components/schemas/ip'
      - $ref: '#/components/schemas/default'
    config:
      properties:
        global:
          type: object
        host_network:
          $ref: '#/components/schemas/network'
      required:
      - global
      - links
      type: object
    network:
      properties:
        links:
          description: Series of links layer interfaces to configure within the namespace
          items:
            $ref: '#/components/schemas/link'
          type: array
        routes:
          description: Namespace routes
          items:
            $ref: '#/components/schemas/route'
          type: array
      type: object
    rule:
      description: IP Rule type
      type: object
    netns:
      description: Network Namespace
      properties:
        name:
          description: Network namespace identifier
          example: yanetnamespace
          type: string
      type: object
    nftable:
      description: Net Filter Table
      type: object
    vrf:
      description: Virtual Routing and Forwarding object
      type: object
    route:
      description: IP L3 Ruote entry
      example:
        prefsrc: 10.1.2.3
        protocol: protocol
        dev: dummy0
        metric: 0
        __id: 42
        flags:
        - null
        - null
        gateway: 10.1.2.3
      properties:
        __id:
          description: Incremental route identifier
          example: 42
          type: integer
        dst:
          $ref: '#/components/schemas/route_dst'
        gateway:
          $ref: '#/components/schemas/ip'
        dev:
          description: |
            Interface name
          example: dummy0
          maxLength: 15
          type: string
        protocol:
          type: string
        metric:
          type: integer
        scope:
          $ref: '#/components/schemas/scope'
        prefsrc:
          $ref: '#/components/schemas/ip'
        flags:
          description: Route flags
          items:
            $ref: '#/components/schemas/route_flags'
          type: array
      type: object
    link:
      example:
        link_type: ether
        ifindex: 0
        address: address
        ifname: dummy0
        __id: dummy0
        addr_info:
        - broadcast: broadcast
          prefixlen: 7
          local: 10.1.2.3
        - broadcast: broadcast
          prefixlen: 7
          local: 10.1.2.3
        mtu: 6
        master: bond0
        linkinfo:
          info_kind: device
          info_slave_kind: bond
          info_slave_data:
            state: ACTIVE
            mii_status: UP
            perm_hwaddr: 1
            link_failure_count: 0
            queue_id: 0
          info_data:
            mode: active-backup
            updelay: 5
            miimon: 5
            downdelay: 2
      properties:
        __id:
          description: |
            Interface name
          example: dummy0
          maxLength: 15
          type: string
        ifindex:
          description: |
            Inteface index ID
          type: integer
        ifname:
          description: |
            Interface name
          example: dummy0
          maxLength: 15
          type: string
        mtu:
          description: |
            Maximum Transfer Unit value
          type: integer
        master:
          allOf:
          - $ref: '#/components/schemas/ifname'
          description: |
            In case the interface is part of a bond or bridge, specifies
            the bond/bridge interface it belongs to.
          example: bond0
        linkinfo:
          $ref: '#/components/schemas/link_linkinfo'
        link_type:
          enum:
          - ether
          - loopback
          - ppp
          type: string
        address:
          type: string
        addr_info:
          items:
            $ref: '#/components/schemas/link_addr_info'
          type: array
      required:
      - ifname
      - link_type
      type: object
    link_linkinfo_info_slave_data:
      description: Info about slave state/config
      example:
        state: ACTIVE
        mii_status: UP
        perm_hwaddr: 1
        link_failure_count: 0
        queue_id: 0
      properties:
        state:
          description: |
            FILL ME
          example: ACTIVE
          type: string
        mii_status:
          description: |
            FILL ME
          example: UP
          type: string
        link_failure_count:
          description: |
            FILL ME
          example: 0
          type: integer
        perm_hwaddr:
          description: |
            FILL ME
          type: integer
        queue_id:
          description: |
            FILL ME
          example: 0
          type: integer
      type: object
    link_linkinfo_info_data:
      description: Additional information on the link
      example:
        mode: active-backup
        updelay: 5
        miimon: 5
        downdelay: 2
      properties:
        mode:
          description: |
            Bonding modes. Supported Modes:
              * `balance-rr` - Round-robin: Transmit network packets in sequential order from the first available network interface (NIC) slave through the last. This mode provides load balancing and fault tolerance.
              * `active-backup` - Active-backup: Only one NIC slave in the bond is active. A different slave becomes active if, and only if, the active slave fails. The single logical bonded interface's MAC address is externally visible on only one NIC (port) to avoid distortion in the network switch. This mode provides fault tolerance.
              * `balance-xor` - XOR: Transmit network packets based on a hash of the packet's source and destination. The default algorithm only considers MAC addresses (layer2). Newer versions allow selection of additional policies based on IP addresses (layer2+3) and TCP/UDP port numbers (layer3+4). This selects the same NIC slave for each destination MAC address, IP address, or IP address and port combination, respectively. This mode provides load balancing and fault tolerance.
              * `broadcast` - Broadcast: Transmit network packets on all slave network interfaces. This mode provides fault tolerance.
              * `802.3ad` - IEEE 802.3ad Dynamic link aggregation: Creates aggregation groups that share the same speed and duplex settings. Utilizes all slave network interfaces in the active aggregator group according to the 802.3ad specification. This mode is similar to the XOR mode above and supports the same balancing policies. The link is set up dynamically between two LACP-supporting peers.
              * `balance-tlb` - Adaptive transmit load balancing: Linux bonding driver mode that does not require any special network-switch support. The outgoing network packet traffic is distributed according to the current load (computed relative to the speed) on each network interface slave. Incoming traffic is received by one currently designated slave network interface. If this receiving slave fails, another slave takes over the MAC address of the failed receiving slave.
              * `balance-alb` - Adaptive load balancing: includes balance-tlb plus receive load balancing (rlb) for IPV4 traffic, and does not require any special network switch support. The receive load balancing is achieved by ARP negotiation. The bonding driver intercepts the ARP Replies sent by the local system on their way out and overwrites the source hardware address with the unique hardware address of one of the NIC slaves in the single logical bonded interface such that different network-peers use different MAC addresses for their network packet traffic.
          enum:
          - active-backup
          example: active-backup
          type: string
        miimon:
          description: "Specifies the MII link monitoring frequency in milliseconds.\
            \ \nThe default value is 0, and this will disable the MII monitor\n"
          type: integer
        updelay:
          description: "Specifies the time, in milliseconds, to wait before enabling\
            \ a slave after a \nlink recovery has been detected. The updelay value\
            \ should be a multiple of the miimon value\n"
          type: integer
        downdelay:
          description: "Specifies the time, in milliseconds, to wait before disabling\
            \ a slave after a \nlink failure has been detected. The downdelay value\
            \ should be a multiple of the miimon value.\n"
          type: integer
      type: object
    link_linkinfo:
      description: |
        Additional link info attributes
      example:
        info_kind: device
        info_slave_kind: bond
        info_slave_data:
          state: ACTIVE
          mii_status: UP
          perm_hwaddr: 1
          link_failure_count: 0
          queue_id: 0
        info_data:
          mode: active-backup
          updelay: 5
          miimon: 5
          downdelay: 2
      properties:
        info_slave_kind:
          description: |
            FILL ME
          example: bond
          type: string
        info_slave_data:
          $ref: '#/components/schemas/link_linkinfo_info_slave_data'
        info_kind:
          description: "Type of link layer interface. Supported Types:\n  * `device`-\
            \ Physical device\n  * `dummy` - Dummy link type interface for binding\
            \ intenal services\n  * `bridge` - Link layer virtual switch type interface\n\
            \  * `bond` - Bond type interface letting two interfaces be seen as one\n\
            \  * `vlan` - Virtual LAN (TAG ID based) interface\n  * `veth` - Virtual\
            \ ethernet (with virtual MAC and IP address)\n  * `macvlan` - Direct virtual\
            \ eth interface connected to the physical interface, \n    with owned\
            \ mac address\n  * `ipvlan` - Direct virtual eth interface connected to\
            \ the physical interface.\n    Physical interface MAC address is reused.\
            \ L2 type directly connects the lan to \n    the host phyisical device.\
            \ L3 type adds a routing layer in between.\n  * `ppp` - Point to Point\
            \ Protocol link type\n"
          enum:
          - device
          - dummy
          - bridge
          - bond
          - vlan
          - veth
          - macvlan
          - ipvlan
          - ppp
          type: string
        info_data:
          $ref: '#/components/schemas/link_linkinfo_info_data'
      type: object
    link_addr_info:
      example:
        broadcast: broadcast
        prefixlen: 7
        local: 10.1.2.3
      properties:
        local:
          $ref: '#/components/schemas/ip'
        prefixlen:
          type: integer
        broadcast:
          type: string
      type: object
