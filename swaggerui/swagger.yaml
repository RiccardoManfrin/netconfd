openapi: 3.0.0
info:
  description: Network Configurator service
  version: 0.1.0
  title: netConfD API
  contact:
    email: support@athonet.com
servers:
  - url: /api/1
tags:
  - name: System
    description: System level APIs (e.g. logging, etc..)
  - name: Network
    description: Network config APIs
paths:
  /config:
    put:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigSet
      summary: |
        Configures and enforces a new live network configuration
      description: |
        Configures and enforces a new live network configuration
      requestBody:
        description: Full Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
      responses:
        '400':
          description: Bad Request (malformed/bad syntax/validation errors)
        '200':
          description: Successful alignment
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigGet
      summary: |
        Configures and enforces a new live network configuration
      description: |
        Configures and enforces a new live network configuration
      responses:
        '200':
          description: Successful alignment
  /config/links:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigLinksGet
      summary: |
        Get all link layer interfaces
      description: |
        Returns the array of the existing link layer interfaces by their ifname id
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/link'
    post:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigLinkCreate
      summary: |
        Configures and brings up a link layer interface
      description: |
        Configures and brings up a link layer interface.
        If the link exists return an error
      requestBody:
        description: Link Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifname'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /config/links/{ifname}:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigLinkGet
      summary: |
        Retrieve link layer interface information
      description: |
        Retrieve link layer interface information
      parameters:
      - in: path
        name: ifname
        required: true
        schema:
          $ref: '#/components/schemas/ifname'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigLinkDel
      summary: |
        Brings down and delete a link layer interface
      description: |
        Brings down and delete a link layer interface
      parameters:
      - in: path
        name: ifname
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /config/routes:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRoutesGet
      summary: |
        Get all routing table routes
      description: |
        Returns the array of the existing routing tables routes ids
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/route'
    post:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigRouteCreate
      summary: |
        Configures a route
      description: |
        Configures a L3 route on the main routing table
      requestBody:
        description: Route Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/route'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/routeid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /config/routes/{routeid}:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRouteGet
      summary: |
        Get a L3 route details
      description: |
        Get a L3 route details
      parameters:
      - in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/routeid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigRouteDel
      summary: |
        Brings down and delete an L3 IP route
      description: |
        Brings down and delete an L3 IP route
      parameters:
      - in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /config/rules:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRulesGet
      summary: |
        Get all ip rules list
      description: |
        Get all ip rules list
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ruleid'
    post:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigRuleCreate
      summary: |
        Configures an IP rule
      description: |
        Configures a L3 IP rule on the main routing table
      requestBody:
        description: Rule Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ruleid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /config/rules/{ruleid}:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRuleGet
      summary: |
        Get an IP rule details
      description: |
        Get an IP rule details
      parameters:
      - in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigRuleDel
      summary: |
        Removes an IP Rule
      description: |
        Removes an IP Rule
      parameters:
      - in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /config/netns:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNetNSsGet
      summary: |
        Get the list all network namespaces
      description: |
        Get the list all network namespaces
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/netnsid'
    post:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigNetNSCreate
      summary: |
        Configures an new Network Namespace
      description: |
        Configures an new Network Namespace
      requestBody:
        description: Network Namespace Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netns'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/netnsid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /config/netns/{netnsid}:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNetNSGet
      summary: |
        Get a network namespace
      description: |
        Get a network namespace
      parameters:
      - in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigNetNSDel
      summary: |
        Removes an IP Rule
      description: |
        Removes an IP Rule
      parameters:
      - in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /config/vrfs:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigVRFsGet
      summary: |
        Get the list all VRFs
      description: |
        Get the list all VRFs
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vrfid'
    post:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigVRFCreate
      summary: |
        Configures an new VRF
      description: |
        Configures an new VRF
      requestBody:
        description: VRF Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vrf'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vrfid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /config/vrfs/{vrfid}:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigVRFGet
      summary: |
        Get a VRF
      description: |
        Get a VRF
      parameters:
      - in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigVRFDel
      summary: |
        Removes a VRF
      description: |
        Removes a VRF
      parameters:
      - in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found

  /config/nftables:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNFTablesGet
      summary: |
        Get the list all NFTables
      description: |
        Get the list all NFTables
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/nftableid'
    post:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigNFTableCreate
      summary: |
        Configures an new NFTable
      description: |
        Configures an new NFTable
      requestBody:
        description: NFTable Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nftable'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/nftableid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /config/ntables/{nftableid}:
    get:
      x-authorization:
        - config
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNFTableGet
      summary: |
        Get a NFTable
      description: |
        Get a NFTable
      parameters:
      - in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - config
        - admin
      tags:
        - Network
      operationId: ConfigNFTableDel
      summary: |
        Removes a NFTable
      description: |
        Removes a NFTable
      parameters:
      - in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found

components:
  schemas:
    ipv4:
      type: string
      format: ipv4
    ipv6:
      type: string
      format: ipv6
    ip:
      example: "10.1.2.3"
      oneOf:
        - $ref: '#/components/schemas/ipv4'
        - $ref: '#/components/schemas/ipv6'
    default:
      type: string
      description: "This is equivalent to 0.0.0.0/0 or ::/0"
      enum: 
        - "default"
    routeid:
      type: integer
      example: 42
      description: Incremental route identifier
    ruleid:
      type: integer
      example: 42
      description: Incremental rule identifier
    netnsid:
      type: string
      example: yanetnamespace
      description: Network namespace identifier
    vrfid:
      type: integer
      example: 42
      description: VRF identifier
    nftableid:
      type: integer
      example: 42
      description: Net Filter Table identifier
    ifname:
      example: "dummy0"
      description: |
        Interface name
      type: string
      maxLength: 15
    scope:
      type: string
      description: scope of the object (link or global)
      enum:
        - "link"
        - "global"
    route_flags:
      type: string
    route_dst:
      oneOf:
        - $ref: '#/components/schemas/ip'
        - $ref: '#/components/schemas/default'
    config:
      type: object
      #required:
      #  - global
      #  - host_network
      properties:
        global:
          type: object
    #    namespaces:
    #      type: array
    #      items:
    #        $ref: '#/components/schemas/namespace'
        host_network:
          $ref: '#/components/schemas/network'
    #namespace:
    #  type: object
    #  properties:
    #    name:
    #      description: |
    #        Namespace name; null or missing param identifies default (PID 1) namespace
    #      type: string
    #      nullable: true
    #    network:
    #      $ref: '#/components/schemas/network'
    network:
      type: object
      properties:
        links:
          type: array
          description: 
            Series of links layer interfaces to configure within the namespace
          items:
            $ref: '#/components/schemas/link'
        routes:
          type: array
          description:
            Namespace routes
          items:
            $ref: '#/components/schemas/route'
    rule:
      type: object
      description: IP Rule type
    netns:
      type: object
      description: Network Namespace
      properties:
        name:
          $ref: '#/components/schemas/netnsid'
    nftable:
      type: object
      description: Net Filter Table
    macaddr:
      type: string
      description: MAC L2 interface HW address
      example: "08:00:27:76:4f:05"
    vrf:
      type: object
      description: Virtual Routing and Forwarding object
    route:
      type: object
      description: IP L3 Ruote entry
      properties:
        __id:
          $ref: '#/components/schemas/routeid'
        dst:
          $ref: '#/components/schemas/route_dst'
        gateway:
          $ref: '#/components/schemas/ip'
        dev:
          $ref: '#/components/schemas/ifname'
        protocol:
          type: string
        metric:
          type: integer
        scope: 
          $ref: '#/components/schemas/scope'
        prefsrc:
          $ref: '#/components/schemas/ip'
        flags:
          type: array
          description:
            Route flags
          items:
            $ref: '#/components/schemas/route_flags'
    link:
      type: object
      properties:
        ifindex:
          description: |
            Inteface index ID
          type: integer
        ifname:
          $ref: '#/components/schemas/ifname'
        flags:
          description: >
            Flags of the interface
            Supported types:
              * `BROADCAST` - Support for broadcast
              * `MULTICAST` - Support for multicast
              * `SLAVE` - Is slave
              * `UP` - Is up
              * `LOWER UP` - Is lower interface up
          type: array
          items:
            type: string
            enum:
              - BROADCAST
              - MULTICAST
              - SLAVE
              - UP
              - LOWER_UP
            example: UP

        mtu:
          description: |
            Maximum Transfer Unit value
          type: integer
        promiscuity:
          description: Promiscuous mode flag
          type: integer
        master:
          allOf:
            - $ref: '#/components/schemas/ifname'
          description: |
            In case the interface is part of a bond or bridge, specifies
            the bond/bridge interface it belongs to.
          example: bond0
        linkinfo:
          description: |
            Additional link info attributes
          type: object
          properties:
            info_slave_kind:
              type: string
              description: |
                Info on the type of slave
                Supported types:
                  * `bond`
                  * `bridge`
              example: "bond"
            info_slave_data:
              type: object
              description: Info about slave state/config
              properties:
                state:
                  type: string
                  description: >
                    State of the link:
                      * `ACTIVE` - Link is actively used
                      * `BACKUP` - Link is used for failover
                  enum:
                    - ACTIVE
                    - BACKUP
                  example: "ACTIVE"
                mii_status:
                  type: string
                  description: >
                    MII Status:
                      * `UP` 
                      * `DOWN`
                  example: "UP"
                  enum:
                    - UP
                    - DOWN
                link_failure_count:
                  type: integer
                  description: |
                    Number of link failures
                  example: 0
                perm_hwaddr:
                  $ref: '#/components/schemas/macaddr'
                queue_id:
                  type: integer
                  #format: int16
                  description: |
                    Queue Identifier
                  example: 0
            
            info_kind:
              type: string
              description: >
                Type of link layer interface.
                Supported Types:
                  * `device`- Physical device
                  * `dummy` - Dummy link type interface for binding intenal services
                  * `bridge` - Link layer virtual switch type interface
                  * `bond` - Bond type interface letting two interfaces be seen as one
                  * `vlan` - Virtual LAN (TAG ID based) interface
                  * `veth` - Virtual ethernet (with virtual MAC and IP address)
                  * `macvlan` - Direct virtual eth interface connected to the physical interface, 
                    with owned mac address
                  * `ipvlan` - Direct virtual eth interface connected to the physical interface.
                    Physical interface MAC address is reused. L2 type directly connects the lan to 
                    the host phyisical device. L3 type adds a routing layer in between.
                  * `tuntap` - Link for to kernel-to-userspace packet forward
              enum:
                - device
                - dummy
                - bridge
                - bond
                - vlan
                - veth
                - macvlan
                - ipvlan
                - ppp
            info_data:
              type: object
              description: Additional information on the link
              properties:
                mode:
                  type: string
                  description: >
                    Bonding modes.
                    Supported Modes:
                      * `balance-rr` - Round-robin: Transmit network packets in sequential order from the first available network interface (NIC) slave through the last. This mode provides load balancing and fault tolerance.
                      * `active-backup` - Active-backup: Only one NIC slave in the bond is active. A different slave becomes active if, and only if, the active slave fails. The single logical bonded interface's MAC address is externally visible on only one NIC (port) to avoid distortion in the network switch. This mode provides fault tolerance.
                      * `balance-xor` - XOR: Transmit network packets based on a hash of the packet's source and destination. The default algorithm only considers MAC addresses (layer2). Newer versions allow selection of additional policies based on IP addresses (layer2+3) and TCP/UDP port numbers (layer3+4). This selects the same NIC slave for each destination MAC address, IP address, or IP address and port combination, respectively. This mode provides load balancing and fault tolerance.
                      * `broadcast` - Broadcast: Transmit network packets on all slave network interfaces. This mode provides fault tolerance.
                      * `802.3ad` - IEEE 802.3ad Dynamic link aggregation: Creates aggregation groups that share the same speed and duplex settings. Utilizes all slave network interfaces in the active aggregator group according to the 802.3ad specification. This mode is similar to the XOR mode above and supports the same balancing policies. The link is set up dynamically between two LACP-supporting peers.
                      * `balance-tlb` - Adaptive transmit load balancing: Linux bonding driver mode that does not require any special network-switch support. The outgoing network packet traffic is distributed according to the current load (computed relative to the speed) on each network interface slave. Incoming traffic is received by one currently designated slave network interface. If this receiving slave fails, another slave takes over the MAC address of the failed receiving slave.
                      * `balance-alb` - Adaptive load balancing: includes balance-tlb plus receive load balancing (rlb) for IPV4 traffic, and does not require any special network switch support. The receive load balancing is achieved by ARP negotiation. The bonding driver intercepts the ARP Replies sent by the local system on their way out and overwrites the source hardware address with the unique hardware address of one of the NIC slaves in the single logical bonded interface such that different network-peers use different MAC addresses for their network packet traffic.
                  enum:
                    - balance-rr
                    - active-backup
                    - balance-xor
                    - broadcast
                    - 802.3ad
                    - balance-tlb
                    - balance-alb
                  example: "active-backup"
                miimon:
                  description: |
                    Specifies the MII link monitoring frequency in milliseconds. 
                    The default value is 0, and this will disable the MII monitor
                  example: 100
                  type: integer
                updelay:
                  description: |
                    Specifies the time, in milliseconds, to wait before enabling a slave after a 
                    link recovery has been detected. The updelay value should be a multiple of the miimon value
                  example: 0
                  type: integer
                downdelay:
                  description: |
                    Specifies the time, in milliseconds, to wait before disabling a slave after a 
                    link failure has been detected. The downdelay value should be a multiple of the miimon value.
                  example: 0
                  type: integer
                #peer_notify_delay:
                #  example: 0,
                #  type: integer
                #use_carrier:
                #  example: 1,
                #  type: integer
                #arp_interval:
                #  example: 0,
                #  type: integer
                #arp_validate:
                #  example: null,
                #  type: boolean
                #arp_all_targets:
                #  example: "any",
                #  type: string
                #primary_reselect:
                #  example: "always",
                #  type: string
                #fail_over_mac:
                #  example: "none",
                #  type: string
                #xmit_hash_policy:
                #  example: "layer2",
                #  type: string
                #resend_igmp:
                #  example: 1,
                #  type: integer
                #num_peer_notif:
                #  example: 1,
                #  type: integer
                #all_slaves_active:
                #  example: 0,
                #  type: integer
                #min_links:
                #  example: 0,
                #  type: integer
                #lp_interval:
                #  example: 1,
                #  type: integer
                #packets_per_slave:
                #  example: 1,
                #  type: integer
                #ad_lacp_rate:
                #  example: "slow",
                #  type: string
                #ad_select:
                #  example: "stable",
                #  type: string
                #tlb_dynamic_lb:
                #  example: 1
                #  type: integer
        #qdisc:
        #  type: string
        #operstate:
        #  type: string
        #group:
        #  type: string
        #txqlen:
        #  type: integer
        link_type:
          type: string
          enum:
            - ether
            - loopback
            - ppp
        address:
          type: string
        #broadcast:
        #  type: string
        addr_info:
          type: array
          items:
            type: object
            properties:
              #family:
              #  type: string
              local:
                $ref: '#/components/schemas/ip'
              prefixlen:
                type: integer
              broadcast:
                type: string
              #scope:
              #  $ref: '#/components/schemas/scope'
              #dynamic:
              #  type: boolean
              #noprefixroute:
              #  type: boolean
              #label:
              #  type: string
              #valid_life_time:
              #  type: integer
              #preferred_life_time:
              #  type: integer
            #required:
              #- family
              #- local
              #- prefixlen
              #- broadcast
              #- scope
              #- dynamic
              #- noprefixroute
              #- label
              #- valid_life_time
              #- preferred_life_time
      required:
        #- ifindex
        - ifname
        #- flags
        #- mtu
        #- qdisc
        #- operstate
        #- group
        #- txqlen
        - link_type
        #- address
        #- broadcast
        #- addr_info
  
