openapi: 3.0.0
info:
  description: Network Configurator service
  version: 0.1.0
  title: netConfD API
  contact:
    email: support@athonet.com
servers:
  - url: /api/1
tags:
  - name: System
    description: System level APIs (e.g. logging, etc..)
  - name: Network
    description: Network config APIs
paths:
  /mgmt/diagnostic:
    post:
      x-authorization:
        - admin
        - support
      tags:
        - System
      operationId: RunDiagnostics
      summary: Run a diagnostic session
      description: |
        Validates the environment by running a set of unit tests on the
        below system.
      responses:
        '200':
          description: Diagnostics completed
  /mgmt/config/persist:
    post:
      x-authorization:
        - support
        - admin
      tags:
        - System
      operationId: PersistConfig
      summary: Persist live configuration
      description: |
        Persist all the live configuration in place 
      responses:
        '200':
          description: Diagnostics completed
  /mgmt/config/reload:
    post:
      x-authorization:
        - support
        - admin
      tags:
        - System
      operationId: ResetConfig
      summary: Reload persisted configuration back
      description: |
        Reload persisted configuration back and re-apply it, ovewriting the volatile live one
      responses:
        '200':
          description: Diagnostics completed
  /mgmt/config:
    put:
      x-authorization:
        - support
        - admin
      tags:
        - System
      operationId: ConfigSet
      summary: |
        Replace existing configuration with new one
      description: |
        Wipe out all existing config and replace it with a new one.
        
        If an error is encountered, the reconfiguration procedure is aborted 
        and network state potentially remains inconsistent.

        Loopback interface cannot be removed as it is unique and not accessory to the (defailt) 
        linux kernel namespace.

        Refs:
          * [Loopback uniqueness](https://elixir.bootlin.com/linux/latest/source/drivers/net/loopback.c#L195)
          * [Loopback identification and need](https://elixir.bootlin.com/linux/latest/source/include/net/flow.h#L18)

      requestBody:
        description: Full Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
      responses:
        '400':
          description: Bad Request (malformed/bad syntax/validation errors)
        '200':
          description: Successful alignment
    patch:
      x-authorization:
        - support
        - admin
      tags:
        - System
      operationId: ConfigPatch
      summary: |
        Patch existing configuration with new one
      description: |
        Preserve existing non conflicting configuration intact. 
        
        All conflicting configuration is erased and recreated according to the 
        new config.
        
        If an error is encountered, the reconfiguration procedure is aborted 
        and network state potentially remains inconsistent.
      requestBody:
        description: Full Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/config'
      responses:
        '400':
          description: Bad Request (malformed/bad syntax/validation errors)
        '200':
          description: Successful alignment
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - System
      operationId: ConfigGet
      summary: |
        Get current live configuration
      description: |
        Get current live configuration
      responses:
        '200':
          description: Successful alignment
  /links:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigLinksGet
      summary: |
        Get All Links
      description: |
        Returns the array of the existing link layer interfaces by their ifname id
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/link'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigLinkCreate
      summary: |
        Create New Link
      description: |
        Configures and brings up a link layer interface.
        If the link exists return an error
      requestBody:
        description: Link Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link'
      responses:
        '201':
          description: Successful creation
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /links/{ifname}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigLinkGet
      summary: |
        Get Link
      description: |
        Retrieve link layer interface information
      parameters:
      - in: path
        name: ifname
        required: true
        schema:
          $ref: '#/components/schemas/ifname'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigLinkDel
      summary: |
        Delete Link
      description: |
        Brings down and delete a link layer interface
      parameters:
      - in: path
        name: ifname
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /routes:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRoutesGet
      summary: |
        Get All Routes
      description: |
        Returns the array of the existing routing tables routes ids
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/route'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigRouteCreate
      summary: |
        Create New Route
      description: |
        Configures a L3 route on the main routing table
      requestBody:
        description: Route Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/route'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/routeid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /routes/{routeid}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRouteGet
      summary: |
        Get Route
      description: |
        Get a L3 route details
      parameters:
      - in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/routeid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigRouteDel
      summary: |
        Delete Route
      description: |
        Brings down and delete an L3 IP route
      parameters:
      - in: path
        name: routeid
        required: true
        schema:
          $ref: '#/components/schemas/routeid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /dhcp:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigDHCPsGet
      summary: |
        Get All DHCP
      description: |
        Returns the array of the existing link layer interfaces 
        controlled via DHCP and related config/state
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/dhcp'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigDHCPCreate
      summary: |
        Create DHCP
      description: |
        Adds a link interface under DHCP management
      requestBody:
        description: DHCP Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dhcp'
      responses:
        '201':
          description: Successful creation
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
  /dhcp/{ifname}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigDHCPGet
      summary: |
        Get DHCP
      description: |
        Retrieve DHCP info for link layer interface
      parameters:
      - in: path
        name: ifname
        required: true
        schema:
          $ref: '#/components/schemas/ifname'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigDHCPDel
      summary: |
        Delete DHCP
      description: |
        Delete DHCP daemon management control for the 
        specified link layer interface
      parameters:
      - in: path
        name: ifname
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /rules:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRulesGet
      summary: |
        Get all ip rules list
      description: |
        Get all ip rules list
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ruleid'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigRuleCreate
      summary: |
        Configures an IP rule
      description: |
        Configures a L3 IP rule on the main routing table
      requestBody:
        description: Rule Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ruleid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /rules/{ruleid}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigRuleGet
      summary: |
        Get an IP rule details
      description: |
        Get an IP rule details
      parameters:
      - in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigRuleDel
      summary: |
        Removes an IP Rule
      description: |
        Removes an IP Rule
      parameters:
      - in: path
        name: ruleid
        required: true
        schema:
          $ref: '#/components/schemas/ruleid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /netns:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNetNSsGet
      summary: |
        Get the list all network namespaces
      description: |
        Get the list all network namespaces
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/netnsid'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigNetNSCreate
      summary: |
        Configures an new Network Namespace
      description: |
        Configures an new Network Namespace
      requestBody:
        description: Network Namespace Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/netns'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/netnsid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /netns/{netnsid}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNetNSGet
      summary: |
        Get a network namespace
      description: |
        Get a network namespace
      parameters:
      - in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigNetNSDel
      summary: |
        Removes an IP Rule
      description: |
        Removes an IP Rule
      parameters:
      - in: path
        name: netnsid
        required: true
        schema:
          $ref: '#/components/schemas/netnsid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found
  /vrfs:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigVRFsGet
      summary: |
        Get the list all VRFs
      description: |
        Get the list all VRFs
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vrfid'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigVRFCreate
      summary: |
        Configures an new VRF
      description: |
        Configures an new VRF
      requestBody:
        description: VRF Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vrf'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vrfid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /vrfs/{vrfid}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigVRFGet
      summary: |
        Get a VRF
      description: |
        Get a VRF
      parameters:
      - in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigVRFDel
      summary: |
        Removes a VRF
      description: |
        Removes a VRF
      parameters:
      - in: path
        name: vrfid
        required: true
        schema:
          $ref: '#/components/schemas/vrfid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found

  /nftables:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNFTablesGet
      summary: |
        Get the list all NFTables
      description: |
        Get the list all NFTables
      responses:
        '200':
          description: Sucessful retrieval
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/nftableid'
    post:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigNFTableCreate
      summary: |
        Configures an new NFTable
      description: |
        Configures an new NFTable
      requestBody:
        description: NFTable Config
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nftable'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/nftableid'
        '409':
          description: 
            Resource already exists, or request is incompatible with
            current network state
        "400":
          description:
            Resource config is semantically or syntactically incorrect
          
  /ntables/{nftableid}:
    get:
      x-authorization:
        - support
        - admin
        - monitor
      tags:
        - Network
      operationId: ConfigNFTableGet
      summary: |
        Get a NFTable
      description: |
        Get a NFTable
      parameters:
      - in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
      responses:
        '200':
          description: Successful get
        "404":
          description: Not found
    delete:
      x-authorization:
        - support
        - admin
      tags:
        - Network
      operationId: ConfigNFTableDel
      summary: |
        Removes a NFTable
      description: |
        Removes a NFTable
      parameters:
      - in: path
        name: nftableid
        required: true
        schema:
          $ref: '#/components/schemas/nftableid'
      responses:
        '200':
          description: Successful delete
        "404":
          description: Not found

components:
  schemas:
    global:
      type: object
      description: Application generic global config
      properties:
        log_lev:
          type: string
          enum:
            - DBG
            - INF
            - WRN
        mgmt:
          type: object
          description: Management address
          properties:
            host:
              $ref: '#/components/schemas/ip'
            port:
              type: integer
              example: 8666
    ip:
      description: IPv4 or IPv6 address
      type: string
      example: "10.1.2.3"
      format: ipaddr
    cidraddr:
      type: string
      format: cidraddr
      example: "10.1.2.3/24"
    routeid:
      type: string
      example: b0804ec967f48520697662a204f5fe72
      description: | 

        MD5 hash based on route relevant context (dst, gw, dev)

        Ignored in creation (readonly), it is only used to identify a route to get or delete
    ruleid:
      type: integer
      example: 42
      description: Incremental rule identifier
    netnsid:
      type: string
      example: yanetnamespace
      description: Network namespace identifier
    vrfid:
      type: integer
      example: 42
      description: VRF identifier
    nftableid:
      type: integer
      example: 42
      description: Net Filter Table identifier
    ifname:
      example: "dummy0"
      description: |
        Interface name
      type: string
      maxLength: 15
    scope:
      type: string
      description: scope of the object
      enum:
        - "link"
        - "global"
        - "universe"
        - "site"
        - "nowhere"
    route_flags:
      type: string
      description: Additonal route info (readonly)
      example: "linkdown"
    route_dst:
      $ref: '#/components/schemas/cidraddr'
    config:
      type: object
      #required:
      #  - global
      #  - host_network
      properties:
        global:
          $ref: '#/components/schemas/global'
        host_network:
          $ref: '#/components/schemas/network'
    #namespace:
    #  type: object
    #  properties:
    #    name:
    #      description: |
    #        Namespace name; null or missing param identifies default (PID 1) namespace
    #      type: string
    #      nullable: true
    #    network:
    #      $ref: '#/components/schemas/network'
    dhcp:
      type: object
      description: |
        DHCP link context to enable. When an object of this kind
        is specified, the DHCP protocol daemon is enabled on the 
        defined interface if it exists. 
      properties:
        ifname:
          $ref: '#/components/schemas/ifname'
    network:
      type: object
      properties:
        links:
          type: array
          description: 
            Series of links layer interfaces to configure within the namespace
          items:
            $ref: '#/components/schemas/link'
        routes:
          type: array
          description:
            Namespace routes
          items:
            $ref: '#/components/schemas/route'
        dhcp:
          type: array
          description:
            DHCP context
          items:
            $ref: '#/components/schemas/dhcp'
    rule:
      type: object
      description: IP Rule type
    netns:
      type: object
      description: Network Namespace
      properties:
        name:
          $ref: '#/components/schemas/netnsid'
    nftable:
      type: object
      description: Net Filter Table
    macaddr:
      type: string
      description: MAC L2 interface HW address
      example: "08:00:27:76:4f:05"
    vrf:
      type: object
      description: Virtual Routing and Forwarding object
    route:
      type: object
      description: IP L3 Ruote entry
      properties:
        __id:
          $ref: '#/components/schemas/routeid'
        dst:
          $ref: '#/components/schemas/route_dst'
        gateway:
          $ref: '#/components/schemas/ip'
        dev:
          $ref: '#/components/schemas/ifname'
        protocol:
          type: string
          example: static
          description: |
            Tells the origin of a route.
            
            Refs:
              * [Netlink](https://github.com/torvalds/linux/blob/master/include/uapi/linux/rtnetlink.h)
              * [Go Unix constants](https://pkg.go.dev/golang.org/x/sys/unix?utm_source=gopls#pkg-constants)
            
            Typical values types:
              
              * `redirect`
              * `kernel`
              * `boot`
              * `static`
              * `dhcp`
              * `bgp`
              * `bird`
              * `ospf`
              * `rip`
              * `zebra`
        metric:
          type: integer
          description: priority of the route
        scope: 
          $ref: '#/components/schemas/scope'
        prefsrc:
          $ref: '#/components/schemas/ip'
        flags:
          type: array
          description:
            Route flags
          items:
            $ref: '#/components/schemas/route_flags'
      required:
        - dst
    link_flag:
      description: |
        Flags of the interface
        
        Supported types:
          * `broadcast` - Request support for broadcast
          * `multicast` - Request support for multicast
          * `loopback` - Specify interface as loopback type
          * `pointtopoint` - Request support for point-to-point
          * `up` - Request link UP state
      type: string
      enum:
        - broadcast
        - multicast
        - loopback
        - up
        - pointtopoint
      example: up
    link:
      type: object
      description: |
        Definition of an ip link interface (emulating iproute2 API)

        References: 
        * [Linux Networking](https://www.kernel.org/doc/Documentation/networking/)
        * [Linux Bonding](https://www.kernel.org/doc/Documentation/networking/bonding.txt)
        * [Links Operstate](https://www.kernel.org/doc/Documentation/networking/operstates.txt)
      properties:
        ifindex:
          description: |
            Inteface index ID
          type: integer
        ifname:
          $ref: '#/components/schemas/ifname'
        link:
          allOf:
            - $ref: '#/components/schemas/ifname'
          description: |
            Specify what is the VLAN physical device the virtual device is linked to.
            Applies to vlan type virtual devices
          example: eth0
        flags:
          description: Composition of flags of the interface
          type: array
          items:
            $ref: '#/components/schemas/link_flag'
        mtu:
          description: |
            Maximum Transfer Unit value
          type: integer
        promiscuity:
          description: Promiscuous mode flag
          type: integer
        master:
          allOf:
            - $ref: '#/components/schemas/ifname'
          description: |
            In case the interface is part of a bond or bridge, specifies
            the bond/bridge interface it belongs to.
          example: bond0
        linkinfo:
          description: |
            Additional link info attributes
          type: object
          properties:
            info_slave_kind:
              type: string
              description: |
                Info on the type of slave
                Supported types:
                  * `bond`
                  * `bridge`
              example: "bond"
              enum:
                - bond
                - bridge
            info_slave_data:
              type: object
              description: Info about slave state/config
              properties:
                state:
                  type: string
                  description: >
                    State of the link:
                      * `ACTIVE` - Link is actively used
                      * `BACKUP` - Link is used for failover
                  enum:
                    - ACTIVE
                    - BACKUP
                  example: "ACTIVE"
                mii_status:
                  type: string
                  description: >
                    MII Status:
                      * `UP` 
                      * `DOWN`
                  example: "UP"
                  enum:
                    - UP
                    - DOWN
                link_failure_count:
                  type: integer
                  description: |
                    Number of link failures
                  example: 0
                perm_hwaddr:
                  $ref: '#/components/schemas/macaddr'
                queue_id:
                  type: integer
                  #format: int16
                  description: |
                    Queue Identifier
                  example: 0
            
            info_kind:
              type: string
              description: >
                Type of link layer interface.
                Supported Types:
                  * `device`- Physical device
                  * `dummy` - Dummy link type interface for binding intenal services
                  * `bridge` - Link layer virtual switch type interface
                  * `bond` - Bond type interface letting two interfaces be seen as one
                  * `vlan` - Virtual LAN (TAG ID based) interface
                  * `veth` - Virtual ethernet (with virtual MAC and IP address)
                  * `macvlan` - Direct virtual eth interface connected to the physical interface, 
                    with owned mac address
                  * `ipvlan` - Direct virtual eth interface connected to the physical interface.
                    Physical interface MAC address is reused. L2 type directly connects the lan to 
                    the host phyisical device. L3 type adds a routing layer in between.
                  * `tuntap` - Link for to kernel-to-userspace packet forward
                  * `ppp` - Point to point [readonly]
              enum:
                - device
                - dummy
                - bridge
                - bond
                - vlan
                - veth
                - macvlan
                - ipvlan
                - ppp
            info_data:
              type: object
              description: Additional information on the link
              properties:
                protocol:
                  type: string
                  description: >
                    VLAN protocols.
                    
                    Supported protocols:
                      * `802.1q` - 802.1Q protocol
                      * `802.1ad` - 802.1AD protocol
                  enum:
                    - 802.1q
                    - 802.1ad
                  example: "802.1q"
                id: 
                  type: integer
                  description: VLAN TAG ID
                  example: 100
                flags:
                  type: array 
                  items:
                    type: string
                    description: >
                      Supported flags for virtual device:
                      
                      * `REORDER_HDR` - specifies whether ethernet headers are reordered or not (default is on). If reorder_hdr is on then VLAN header will be not inserted immediately but only before passing to the physical device (if this device does not support VLAN offloading), the similar on the RX direction - by default the packet will be untagged before being received by VLAN device. Reordering allows to accelerate tagging on egress and to hide VLAN header on ingress so the packet looks like regular Ethernet packet, at the same time it might be confusing for packet capture as the VLAN header does not exist within the packet. 
                    enum:
                      - REORDER_HDR
                mode:
                  type: string
                  description: >
                    Bonding modes.
                    
                    Supported Modes:
                      * `balance-rr` - Round-robin: Transmit network packets in sequential order from the first available network interface (NIC) slave through the last. This mode provides load balancing and fault tolerance.
                      * `active-backup` - Active-backup: Only one NIC slave in the bond is active. A different slave becomes active if, and only if, the active slave fails. The single logical bonded interface's MAC address is externally visible on only one NIC (port) to avoid distortion in the network switch. This mode provides fault tolerance.
                      * `balance-xor` - XOR: Transmit network packets based on a hash of the packet's source and destination. The default algorithm only considers MAC addresses (layer2). Newer versions allow selection of additional policies based on IP addresses (layer2+3) and TCP/UDP port numbers (layer3+4). This selects the same NIC slave for each destination MAC address, IP address, or IP address and port combination, respectively. This mode provides load balancing and fault tolerance.
                      * `broadcast` - Broadcast: Transmit network packets on all slave network interfaces. This mode provides fault tolerance.
                      * `802.3ad` - IEEE 802.3ad Dynamic link aggregation: Creates aggregation groups that share the same speed and duplex settings. Utilizes all slave network interfaces in the active aggregator group according to the 802.3ad specification. This mode is similar to the XOR mode above and supports the same balancing policies. The link is set up dynamically between two LACP-supporting peers.
                      * `balance-tlb` - Adaptive transmit load balancing: Linux bonding driver mode that does not require any special network-switch support. The outgoing network packet traffic is distributed according to the current load (computed relative to the speed) on each network interface slave. Incoming traffic is received by one currently designated slave network interface. If this receiving slave fails, another slave takes over the MAC address of the failed receiving slave.
                      * `balance-alb` - Adaptive load balancing: includes balance-tlb plus receive load balancing (rlb) for IPV4 traffic, and does not require any special network switch support. The receive load balancing is achieved by ARP negotiation. The bonding driver intercepts the ARP Replies sent by the local system on their way out and overwrites the source hardware address with the unique hardware address of one of the NIC slaves in the single logical bonded interface such that different network-peers use different MAC addresses for their network packet traffic.
                  enum:
                    - balance-rr
                    - active-backup
                    - balance-xor
                    - broadcast
                    - 802.3ad
                    - balance-tlb
                    - balance-alb
                  example: "active-backup"
                miimon:
                  description: |
                    Specifies the MII link monitoring frequency in milliseconds. 
                    The default value is 0, and this will disable the MII monitor
                  example: 100
                  type: integer
                updelay:
                  description: |
                    Specifies the time, in milliseconds, to wait before enabling a slave after a 
                    link recovery has been detected. The updelay value must be a multiple of the miimon value
                  example: 0
                  type: integer
                downdelay:
                  description: |
                    Specifies the time, in milliseconds, to wait before disabling a slave after a 
                    link failure has been detected. The downdelay value must be a multiple of the miimon value.
                  example: 0
                  type: integer
                peer_notify_delay:
                  example: 0
                  type: integer
                  description: |
                    Specify the delay, in milliseconds, between each peer
                    notification (gratuitous ARP and unsolicited IPv6 Neighbor
                    Advertisement) when they are issued after a failover event.
                    This delay should be a multiple of the link monitor interval
                    (arp_interval or miimon, whichever is active). The default
                    value is 0 which means to match the value of the link monitor
                    interval.
                use_carrier:
                  example: 1
                  type: integer
                  description:
                    Specifies whether or not miimon should use MII or ETHTOOL
                    ioctls vs. netif_carrier_ok() to determine the link
                    status. The MII or ETHTOOL ioctls are less efficient and
                    utilize a deprecated calling sequence within the kernel.  The
                    netif_carrier_ok() relies on the device driver to maintain its
                    state with netif_carrier_on/off; at this writing, most, but
                    not all, device drivers support this facility.
                    
                    If bonding insists that the link is up when it should not be,
                    it may be that your network device driver does not support
                    netif_carrier_on/off.  The default state for netif_carrier is
                    "carrier on," so if a driver does not support netif_carrier,
                    it will appear as if the link is always up.  In this case,
                    setting use_carrier to 0 will cause bonding to revert to the
                    MII / ETHTOOL ioctl method to determine the link state.
                    
                    A value of 1 enables the use of netif_carrier_ok(), a value of
                    0 will use the deprecated MII / ETHTOOL ioctls.  The default
                    value is 1.
                arp_interval:
                  example: 0
                  type: integer
                  description : >
                    Specifies the ARP link monitoring frequency in milliseconds.
                    
                    The ARP monitor works by periodically checking the slave
                    devices to determine whether they have sent or received
                    traffic recently (the precise criteria depends upon the
                    bonding mode, and the state of the slave).  Regular traffic is
                    generated via ARP probes issued for the addresses specified by
                    the arp_ip_target option.
                    
                    This behavior can be modified by the arp_validate option,
                    below.
                    
                    If ARP monitoring is used in an etherchannel compatible mode
                    (modes 0 and 2), the switch should be configured in a mode
                    that evenly distributes packets across all links. If the
                    switch is configured to distribute the packets in an XOR
                    fashion, all replies from the ARP targets will be received on
                    the same link which could cause the other team members to
                    fail.  ARP monitoring should not be used in conjunction with
                    miimon.  A value of 0 disables ARP monitoring.  The default
                    value is 0.
                arp_validate:
                  example: null
                  type: string
                  description: >
                    Specifies whether or not ARP probes and replies should be
                    validated in any mode that supports arp monitoring, or whether
                    non-ARP traffic should be filtered (disregarded) for link
                    monitoring purposes.
                    
                    Possible values are:
                    
                    * `none` - or 0
                    
                    No validation or filtering is performed.
                    
                    * `active` - or 1
                    
                    Validation is performed only for the active slave.
                    
                    * `backup` - or 2
                    
                    Validation is performed only for backup slaves.
                    
                    * `all` - or 3
                    
                    Validation is performed for all slaves.
                    
                    * `filter` - or 4
                    
                    Filtering is applied to all slaves. No validation is
                    performed.
                    
                    * `filter_active` - or 5
                    
                    Filtering is applied to all slaves, validation is performed
                    only for the active slave.
                    
                    * `filter_backup` - or 6
                    
                    Filtering is applied to all slaves, validation is performed
                    only for backup slaves.
                  enum:
                    - none
                    - active
                    - backup
                    - all
                    - filter
                    - filter_active
                    - filter_backup
                arp_all_targets:
                  example: "any"
                  type: string
                  description: >
                    Specifies the quantity of arp_ip_targets that must be reachable
                    in order for the ARP monitor to consider a slave as being up.
                    This option affects only active-backup mode for slaves with
                    arp_validation enabled.
                    
                    Possible values are:
                    
                    * `any` - or 0
                      consider the slave up only when any of the arp_ip_targets
                      is reachable
                    
                    * `all` - or 1
                      consider the slave up only when all of the arp_ip_targets
                      are reachable
                  enum:
                    - any
                    - all
                primary_reselect:
                  example: "always"
                  type: string
                  description: >
                    Specifies the reselection policy for the primary slave.  This
                    affects how the primary slave is chosen to become the active slave
                    when failure of the active slave or recovery of the primary slave
                    occurs.  This option is designed to prevent flip-flopping between
                    the primary slave and other slaves.  Possible values are:
                    
                      * `always` - or 0 (default)
                        The primary slave becomes the active slave whenever it
                        comes back up.
                      * `better` - or 1
                        The primary slave becomes the active slave when it comes
                        back up, if the speed and duplex of the primary slave is
                        better than the speed and duplex of the current active
                        slave.
                      * `failure` - or 2
                        The primary slave becomes the active slave only if the
                        current active slave fails and the primary slave is up.
                    
                    The primary_reselect setting is ignored in two cases:
                    
                      * If no slaves are active, the first slave to recover is
                        made the active slave.
                    
                      * When initially enslaved, the primary slave is always made
                        the active slave.
                  
                    Changing the primary_reselect policy via sysfs will cause an
                    immediate selection of the best active slave according to the new
                    policy.  This may or may not result in a change of the active
                    slave, depending upon the circumstances.
                    
                    This option was added for bonding version 3.6.0.
                  enum:
                    - always
                    - better
                    - slave
                fail_over_mac:
                  example: "none"
                  type: string
                  description : >
                    Specifies whether active-backup mode should set all slaves to
                    the same MAC address at enslavement (the traditional
                    behavior), or, when enabled, perform special handling of the
                    bond's MAC address in accordance with the selected policy.
                    The default policy is none, unless the first slave cannot
                    change its MAC address, in which case the active policy is
                    selected by default.
                    This option may be modified via sysfs only when no slaves are
                    present in the bond.
                    This option was added in bonding version 3.2.0.  The "follow"
                    policy was added in bonding version 3.3.0.
                    Possible values are:
                      * `none` - or 0
                      This setting disables fail_over_mac, and causes
                      bonding to set all slaves of an active-backup bond to
                      the same MAC address at enslavement time.  This is the
                      default.
                      * `active` - or 1
                      The "active" fail_over_mac policy indicates that the
                      MAC address of the bond should always be the MAC
                      address of the currently active slave.  The MAC
                      address of the slaves is not changed; instead, the MAC
                      address of the bond changes during a failover.
                      This policy is useful for devices that cannot ever
                      alter their MAC address, or for devices that refuse
                      incoming broadcasts with their own source MAC (which
                      interferes with the ARP monitor).
                      The down side of this policy is that every device on
                      the network must be updated via gratuitous ARP,
                      vs. just updating a switch or set of switches (which
                      often takes place for any traffic, not just ARP
                      traffic, if the switch snoops incoming traffic to
                      update its tables) for the traditional method.  If the
                      gratuitous ARP is lost, communication may be
                      disrupted.
                      When this policy is used in conjunction with the mii
                      monitor, devices which assert link up prior to being
                      able to actually transmit and receive are particularly
                      susceptible to loss of the gratuitous ARP, and an
                      appropriate updelay setting may be required.
                      * `follow` - or 2
                      The "follow" fail_over_mac policy causes the MAC
                      address of the bond to be selected normally (normally
                      the MAC address of the first slave added to the bond).
                      However, the second and subsequent slaves are not set
                      to this MAC address while they are in a backup role; a
                      slave is programmed with the bond's MAC address at
                      failover time (and the formerly active slave receives
                      the newly active slave's MAC address).
                      This policy is useful for multiport devices that
                      either become confused or incur a performance penalty
                      when multiple ports are programmed with the same MAC
                      address.
                  enum:
                    - none
                    - active
                    - follow
                xmit_hash_policy:
                  example: "layer2"
                  type: string
                  description: >
                    Hash policy to route packets on different bond interfaces. 
                    Supported Modes:
                      * `layer2` - Hash is made on L2 metadata (default)
                      * `layer2+3` - Hash is made on L2 and L3 metadata
                      * `layer3+4` - Hash is made on L3 and L4 metadata
                  enum:
                    - layer2
                    - layer2+3
                    - layer3+4
                resend_igmp:
                  example: 1
                  type: integer
                  #format: uint8
                  description: |
                    Specifies the number of IGMP membership reports to be issued after
                    a failover event. One membership report is issued immediately after
                    the failover, subsequent packets are sent in each 200ms interval.

                    The valid range is 0 - 255; the default value is 1. A value of 0
                    prevents the IGMP membership report from being issued in response
                    to the failover event.

                    This option is useful for bonding modes balance-rr (0), active-backup
                    (1), balance-tlb (5) and balance-alb (6), in which a failover can
                    switch the IGMP traffic from one slave to another.  Therefore a fresh
                    IGMP report must be issued to cause the switch to forward the incoming
                    IGMP traffic over the newly selected slave.

                    This option was added for bonding version 3.7.0.
                all_slaves_active:
                  example: 0
                  type: integer
                  description: |
                    Specifies that duplicate frames (received on inactive ports) should be
                    dropped (0) or delivered (1).

                    Normally, bonding will drop duplicate frames (received on inactive
                    ports), which is desirable for most users. But there are some times
                    it is nice to allow duplicate frames to be delivered.

                    The default value is 0 (drop duplicate frames received on inactive
                    ports).
                min_links:
                  example: 0
                  type: integer
                  description: |
                    Specifies the minimum number of links that must be active before
                    asserting carrier. It is similar to the Cisco EtherChannel min-links
                    feature. This allows setting the minimum number of member ports that
                    must be up (link-up state) before marking the bond device as up
                    (carrier on). This is useful for situations where higher level services
                    such as clustering want to ensure a minimum number of low bandwidth
                    links are active before switchover. This option only affect 802.3ad
                    mode.

                    The default value is 0. This will cause carrier to be asserted (for
                    802.3ad mode) whenever there is an active aggregator, regardless of the
                    number of available links in that aggregator. Note that, because an
                    aggregator cannot be active without at least one available link,
                    setting this option to 0 or to 1 has the exact same effect.
                lp_interval:
                  example: 1
                  type: integer
                  description: |
                    Specifies the number of seconds between instances where the bonding
                    driver sends learning packets to each slaves peer switch.

                    The valid range is 1 - 0x7fffffff; the default value is 1. This Option
                    has effect only in balance-tlb and balance-alb modes.
                packets_per_slave:
                  example: 1
                  type: integer
                  description: |
                    Specify the number of packets to transmit through a slave before
                    moving to the next one. When set to 0 then a slave is chosen at
                    random.

                    The valid range is 0 - 65535; the default value is 1. This option
                    has effect only in balance-rr mode.
                ad_lacp_rate:
                  example: "slow"
                  type: string
                  description: >
                    Rate at which LACP control packets are sent to an LACP-supported interface
                    Supported Modes:
                      * `slow` - LACP Slow Rate (less bandwidth, default)
                      * `fast` - LACP Fast Rate (faster fault detection)
                  enum:
                    - slow
                    - fast
                ad_select:
                  example: "stable"
                  type: string
                  description: >
                    Specifies the 802.3ad aggregation selection logic to use. 
                    The possible values and their effects are:
                      * `stable` - or 0
                        The active aggregator is chosen by largest aggregate
                        bandwidth.
                        Reselection of the active aggregator occurs only when all
                        slaves of the active aggregator are down or the active
                        aggregator has no slaves.
                        This is the default value.
                      * `bandwidth` or 1
                        The active aggregator is chosen by largest aggregate
                        bandwidth.  Reselection occurs if:
                        - A slave is added to or removed from the bond
                        - Any slave's link state changes
                        - Any slave's 802.3ad association state changes
                        - The bond's administrative state changes to up
                      * `count` - or 2
                        The active aggregator is chosen by the largest number of
                        ports (slaves).  Reselection occurs as described under the
                        "bandwidth" setting, above.
                        
                    The bandwidth and count selection policies permit failover of
                    802.3ad aggregations when partial failure of the active aggregator
                    occurs.  This keeps the aggregator with the highest availability
                    (either in bandwidth or in number of ports) active at all times.
                    
                    This option was added in bonding version 3.4.0.
                  enum:
                    - stable
                    - bandwidth
                    - count
                tlb_dynamic_lb:
                  example: 1
                  type: integer
                  description: |
                    Specifies if dynamic shuffling of flows is enabled in tlb
                    mode. The value has no effect on any other modes.

                    The default behavior of tlb mode is to shuffle active flows across
                    slaves based on the load in that interval. This gives nice lb
                    characteristics but can cause packet reordering. If re-ordering is
                    a concern use this variable to disable flow shuffling and rely on
                    load balancing provided solely by the hash distribution.
                    xmit-hash-policy can be used to select the appropriate hashing for
                    the setup.

                    The sysfs entry can be used to change the setting per bond device
                    and the initial value is derived from the module parameter. The
                    sysfs entry is allowed to be changed only if the bond device is
                    down.

                    The default value is "1" that enables flow shuffling while value "0"
                    disables it. This option was added in bonding driver 3.7.1
        #qdisc:
        #  type: string
        operstate:
          description: |
            Readonly state of the interface.

            Provides information on the state being for example UP of an interface.
            
            It is ignored when applying the config

            Possible values:

              * `up` - Interface is up
              * `down` - Interface is down
              * `unknown` - Interface state is not known (driver does not implement the API)
          type: string
          enum:
            - up
            - down
            - unknown
          example: "down"
        #txqlen:
        #  type: integer
        linkmode:
          type: string
          example: "DEFAULT"
        group:
          type: string
          example: "default"
        link_type:
          type: string
          enum:
            - ether
            - loopback
            - ppp
        address:
          type: string
        #broadcast:
        #  type: string
        addr_info:
          type: array
          items:
            type: object
            properties:
              #family:
              #  type: string
              local:
                $ref: '#/components/schemas/ip'
              prefixlen:
                type: integer
                example: 24
              broadcast:
                type: string
                example: "10.1.2.255"
              #scope:
              #  $ref: '#/components/schemas/scope'
              #dynamic:
              #  type: boolean
              #noprefixroute:
              #  type: boolean
              #label:
              #  type: string
              #valid_life_time:
              #  type: integer
              #preferred_life_time:
              #  type: integer
            required:
              #- family
              - local
              - prefixlen
              #- broadcast
              #- scope
              #- dynamic
              #- noprefixroute
              #- label
              #- valid_life_time
              #- preferred_life_time
      required:
        #- ifindex
        - ifname
        #- flags
        #- mtu
        #- qdisc
        #- operstate
        #- group
        #- txqlen
        - link_type
        #- address
        #- broadcast
        #- addr_info
  
